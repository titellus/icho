/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork 4.0.6 OpenAPI Documentation
 * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.
 *
 * The version of the OpenAPI document: 4.0.6
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
import { Configuration } from "../../../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../../../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../../../base";
// @ts-ignore
import { RelatedResponse } from "../../..//geonetwork-openapi/model";
/**
 * RelatedApi - axios parameter creator
 * @export
 */
export const RelatedApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Retrieve related services, datasets, onlines, thumbnails, sources, ... to all requested records.<br/><a href=\'http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/associating-resources/index.html\'>More info</a>
     * @summary Get record related resources for all requested metadatas
     * @param {Array<'children' | 'parent' | 'brothersAndSisters' | 'siblings' | 'associated' | 'services' | 'datasets' | 'fcats' | 'hasfeaturecats' | 'sources' | 'hassources' | 'related' | 'onlines' | 'thumbnails'>} [type] Type of related resource. If none, all resources are returned.
     * @param {Array<string>} [uuid] Uuids of the metadatas you request the relations from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAssociatedResourcesForRecords: async (
      type?: Array<
        | "children"
        | "parent"
        | "brothersAndSisters"
        | "siblings"
        | "associated"
        | "services"
        | "datasets"
        | "fcats"
        | "hasfeaturecats"
        | "sources"
        | "hassources"
        | "related"
        | "onlines"
        | "thumbnails"
      >,
      uuid?: Array<string>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/related`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (type) {
        localVarQueryParameter["type"] = type;
      }

      if (uuid) {
        localVarQueryParameter["uuid"] = uuid;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * RelatedApi - functional programming interface
 * @export
 */
export const RelatedApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = RelatedApiAxiosParamCreator(configuration);
  return {
    /**
     * Retrieve related services, datasets, onlines, thumbnails, sources, ... to all requested records.<br/><a href=\'http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/associating-resources/index.html\'>More info</a>
     * @summary Get record related resources for all requested metadatas
     * @param {Array<'children' | 'parent' | 'brothersAndSisters' | 'siblings' | 'associated' | 'services' | 'datasets' | 'fcats' | 'hasfeaturecats' | 'sources' | 'hassources' | 'related' | 'onlines' | 'thumbnails'>} [type] Type of related resource. If none, all resources are returned.
     * @param {Array<string>} [uuid] Uuids of the metadatas you request the relations from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAssociatedResourcesForRecords(
      type?: Array<
        | "children"
        | "parent"
        | "brothersAndSisters"
        | "siblings"
        | "associated"
        | "services"
        | "datasets"
        | "fcats"
        | "hasfeaturecats"
        | "sources"
        | "hassources"
        | "related"
        | "onlines"
        | "thumbnails"
      >,
      uuid?: Array<string>,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<{ [key: string]: RelatedResponse }>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getAssociatedResourcesForRecords(
          type,
          uuid,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * RelatedApi - factory interface
 * @export
 */
export const RelatedApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = RelatedApiFp(configuration);
  return {
    /**
     * Retrieve related services, datasets, onlines, thumbnails, sources, ... to all requested records.<br/><a href=\'http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/associating-resources/index.html\'>More info</a>
     * @summary Get record related resources for all requested metadatas
     * @param {Array<'children' | 'parent' | 'brothersAndSisters' | 'siblings' | 'associated' | 'services' | 'datasets' | 'fcats' | 'hasfeaturecats' | 'sources' | 'hassources' | 'related' | 'onlines' | 'thumbnails'>} [type] Type of related resource. If none, all resources are returned.
     * @param {Array<string>} [uuid] Uuids of the metadatas you request the relations from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAssociatedResourcesForRecords(
      type?: Array<
        | "children"
        | "parent"
        | "brothersAndSisters"
        | "siblings"
        | "associated"
        | "services"
        | "datasets"
        | "fcats"
        | "hasfeaturecats"
        | "sources"
        | "hassources"
        | "related"
        | "onlines"
        | "thumbnails"
      >,
      uuid?: Array<string>,
      options?: any
    ): AxiosPromise<{ [key: string]: RelatedResponse }> {
      return localVarFp
        .getAssociatedResourcesForRecords(type, uuid, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * RelatedApi - object-oriented interface
 * @export
 * @class RelatedApi
 * @extends {BaseAPI}
 */
export class RelatedApi extends BaseAPI {
  /**
   * Retrieve related services, datasets, onlines, thumbnails, sources, ... to all requested records.<br/><a href=\'http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/associating-resources/index.html\'>More info</a>
   * @summary Get record related resources for all requested metadatas
   * @param {Array<'children' | 'parent' | 'brothersAndSisters' | 'siblings' | 'associated' | 'services' | 'datasets' | 'fcats' | 'hasfeaturecats' | 'sources' | 'hassources' | 'related' | 'onlines' | 'thumbnails'>} [type] Type of related resource. If none, all resources are returned.
   * @param {Array<string>} [uuid] Uuids of the metadatas you request the relations from.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RelatedApi
   */
  public getAssociatedResourcesForRecords(
    type?: Array<
      | "children"
      | "parent"
      | "brothersAndSisters"
      | "siblings"
      | "associated"
      | "services"
      | "datasets"
      | "fcats"
      | "hasfeaturecats"
      | "sources"
      | "hassources"
      | "related"
      | "onlines"
      | "thumbnails"
    >,
    uuid?: Array<string>,
    options?: AxiosRequestConfig
  ) {
    return RelatedApiFp(this.configuration)
      .getAssociatedResourcesForRecords(type, uuid, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

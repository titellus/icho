/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork 4.0.6 OpenAPI Documentation
 * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.
 *
 * The version of the OpenAPI document: 4.0.6
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
import { Configuration } from "../../../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../../../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../../../base";
// @ts-ignore
import { Group } from "../../..//geonetwork-openapi/model";
// @ts-ignore
import { User } from "../../..//geonetwork-openapi/model";
/**
 * GroupsApi - axios parameter creator
 * @export
 */
export const GroupsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Return the identifier of the group created.
     * @summary Add a group
     * @param {Group} group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addGroup: async (
      group: Group,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'group' is not null or undefined
      assertParamExists("addGroup", "group", group);
      const localVarPath = `/groups`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        group,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Remove a group by first removing sharing settings, link to users and finally reindex all affected records.
     * @summary Remove a group
     * @param {number} groupIdentifier Group identifier.
     * @param {boolean} [force] Force removal even if records are assigned to that group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGroup: async (
      groupIdentifier: number,
      force?: boolean,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupIdentifier' is not null or undefined
      assertParamExists("deleteGroup", "groupIdentifier", groupIdentifier);
      const localVarPath = `/groups/{groupIdentifier}`.replace(
        `{${"groupIdentifier"}}`,
        encodeURIComponent(String(groupIdentifier))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (force !== undefined) {
        localVarQueryParameter["force"] = force;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Return the requested group details.
     * @summary Get group
     * @param {number} groupIdentifier Group identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroup: async (
      groupIdentifier: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupIdentifier' is not null or undefined
      assertParamExists("getGroup", "groupIdentifier", groupIdentifier);
      const localVarPath = `/groups/{groupIdentifier}`.replace(
        `{${"groupIdentifier"}}`,
        encodeURIComponent(String(groupIdentifier))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * If last-modified header is present it is used to check if the logo has been modified since the header date. If it hasn\'t been modified returns an empty 304 Not Modified response. If modified returns the image. If the group has no logo then returns a transparent 1x1 px PNG image.
     * @summary Get the group logo image.
     * @param {number} groupId Group identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroupLogo: async (
      groupId: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupId' is not null or undefined
      assertParamExists("getGroupLogo", "groupId", groupId);
      const localVarPath = `/groups/{groupId}/logo`.replace(
        `{${"groupId"}}`,
        encodeURIComponent(String(groupId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get group users
     * @param {number} groupIdentifier Group identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroupUsers: async (
      groupIdentifier: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupIdentifier' is not null or undefined
      assertParamExists("getGroupUsers", "groupIdentifier", groupIdentifier);
      const localVarPath = `/groups/{groupIdentifier}/users`.replace(
        `{${"groupIdentifier"}}`,
        encodeURIComponent(String(groupIdentifier))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * The catalog contains one or more groups. By default, there is 3 reserved groups (Internet, Intranet, Guest) and a sample group.<br/>This service returns all catalog groups when not authenticated or when current is user is an administrator. The list can contains or not reserved groups depending on the parameters.<br/>When authenticated, return user groups optionally filtered on a specific user profile.
     * @summary Get groups
     * @param {boolean} [withReservedGroup] Including Internet, Intranet, Guest groups or not
     * @param {string} [profile] For a specific profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroups: async (
      withReservedGroup?: boolean,
      profile?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/groups`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (withReservedGroup !== undefined) {
        localVarQueryParameter["withReservedGroup"] = withReservedGroup;
      }

      if (profile !== undefined) {
        localVarQueryParameter["profile"] = profile;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a group
     * @param {number} groupIdentifier Group identifier
     * @param {Group} group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGroup: async (
      groupIdentifier: number,
      group: Group,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupIdentifier' is not null or undefined
      assertParamExists("updateGroup", "groupIdentifier", groupIdentifier);
      // verify required parameter 'group' is not null or undefined
      assertParamExists("updateGroup", "group", group);
      const localVarPath = `/groups/{groupIdentifier}`.replace(
        `{${"groupIdentifier"}}`,
        encodeURIComponent(String(groupIdentifier))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        group,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * GroupsApi - functional programming interface
 * @export
 */
export const GroupsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = GroupsApiAxiosParamCreator(configuration);
  return {
    /**
     * Return the identifier of the group created.
     * @summary Add a group
     * @param {Group} group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addGroup(
      group: Group,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addGroup(
        group,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Remove a group by first removing sharing settings, link to users and finally reindex all affected records.
     * @summary Remove a group
     * @param {number} groupIdentifier Group identifier.
     * @param {boolean} [force] Force removal even if records are assigned to that group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteGroup(
      groupIdentifier: number,
      force?: boolean,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGroup(
        groupIdentifier,
        force,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Return the requested group details.
     * @summary Get group
     * @param {number} groupIdentifier Group identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getGroup(
      groupIdentifier: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getGroup(
        groupIdentifier,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * If last-modified header is present it is used to check if the logo has been modified since the header date. If it hasn\'t been modified returns an empty 304 Not Modified response. If modified returns the image. If the group has no logo then returns a transparent 1x1 px PNG image.
     * @summary Get the group logo image.
     * @param {number} groupId Group identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getGroupLogo(
      groupId: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getGroupLogo(
        groupId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get group users
     * @param {number} groupIdentifier Group identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getGroupUsers(
      groupIdentifier: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getGroupUsers(
        groupIdentifier,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * The catalog contains one or more groups. By default, there is 3 reserved groups (Internet, Intranet, Guest) and a sample group.<br/>This service returns all catalog groups when not authenticated or when current is user is an administrator. The list can contains or not reserved groups depending on the parameters.<br/>When authenticated, return user groups optionally filtered on a specific user profile.
     * @summary Get groups
     * @param {boolean} [withReservedGroup] Including Internet, Intranet, Guest groups or not
     * @param {string} [profile] For a specific profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getGroups(
      withReservedGroup?: boolean,
      profile?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Group>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getGroups(
        withReservedGroup,
        profile,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update a group
     * @param {number} groupIdentifier Group identifier
     * @param {Group} group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateGroup(
      groupIdentifier: number,
      group: Group,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateGroup(
        groupIdentifier,
        group,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * GroupsApi - factory interface
 * @export
 */
export const GroupsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = GroupsApiFp(configuration);
  return {
    /**
     * Return the identifier of the group created.
     * @summary Add a group
     * @param {Group} group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addGroup(group: Group, options?: any): AxiosPromise<number> {
      return localVarFp
        .addGroup(group, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Remove a group by first removing sharing settings, link to users and finally reindex all affected records.
     * @summary Remove a group
     * @param {number} groupIdentifier Group identifier.
     * @param {boolean} [force] Force removal even if records are assigned to that group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGroup(
      groupIdentifier: number,
      force?: boolean,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .deleteGroup(groupIdentifier, force, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Return the requested group details.
     * @summary Get group
     * @param {number} groupIdentifier Group identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroup(groupIdentifier: number, options?: any): AxiosPromise<void> {
      return localVarFp
        .getGroup(groupIdentifier, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * If last-modified header is present it is used to check if the logo has been modified since the header date. If it hasn\'t been modified returns an empty 304 Not Modified response. If modified returns the image. If the group has no logo then returns a transparent 1x1 px PNG image.
     * @summary Get the group logo image.
     * @param {number} groupId Group identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroupLogo(groupId: number, options?: any): AxiosPromise<void> {
      return localVarFp
        .getGroupLogo(groupId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get group users
     * @param {number} groupIdentifier Group identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroupUsers(
      groupIdentifier: number,
      options?: any
    ): AxiosPromise<Array<User>> {
      return localVarFp
        .getGroupUsers(groupIdentifier, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * The catalog contains one or more groups. By default, there is 3 reserved groups (Internet, Intranet, Guest) and a sample group.<br/>This service returns all catalog groups when not authenticated or when current is user is an administrator. The list can contains or not reserved groups depending on the parameters.<br/>When authenticated, return user groups optionally filtered on a specific user profile.
     * @summary Get groups
     * @param {boolean} [withReservedGroup] Including Internet, Intranet, Guest groups or not
     * @param {string} [profile] For a specific profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroups(
      withReservedGroup?: boolean,
      profile?: string,
      options?: any
    ): AxiosPromise<Array<Group>> {
      return localVarFp
        .getGroups(withReservedGroup, profile, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a group
     * @param {number} groupIdentifier Group identifier
     * @param {Group} group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGroup(
      groupIdentifier: number,
      group: Group,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .updateGroup(groupIdentifier, group, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * GroupsApi - object-oriented interface
 * @export
 * @class GroupsApi
 * @extends {BaseAPI}
 */
export class GroupsApi extends BaseAPI {
  /**
   * Return the identifier of the group created.
   * @summary Add a group
   * @param {Group} group
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public addGroup(group: Group, options?: AxiosRequestConfig) {
    return GroupsApiFp(this.configuration)
      .addGroup(group, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Remove a group by first removing sharing settings, link to users and finally reindex all affected records.
   * @summary Remove a group
   * @param {number} groupIdentifier Group identifier.
   * @param {boolean} [force] Force removal even if records are assigned to that group.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public deleteGroup(
    groupIdentifier: number,
    force?: boolean,
    options?: AxiosRequestConfig
  ) {
    return GroupsApiFp(this.configuration)
      .deleteGroup(groupIdentifier, force, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Return the requested group details.
   * @summary Get group
   * @param {number} groupIdentifier Group identifier
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public getGroup(groupIdentifier: number, options?: AxiosRequestConfig) {
    return GroupsApiFp(this.configuration)
      .getGroup(groupIdentifier, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * If last-modified header is present it is used to check if the logo has been modified since the header date. If it hasn\'t been modified returns an empty 304 Not Modified response. If modified returns the image. If the group has no logo then returns a transparent 1x1 px PNG image.
   * @summary Get the group logo image.
   * @param {number} groupId Group identifier
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public getGroupLogo(groupId: number, options?: AxiosRequestConfig) {
    return GroupsApiFp(this.configuration)
      .getGroupLogo(groupId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get group users
   * @param {number} groupIdentifier Group identifier
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public getGroupUsers(groupIdentifier: number, options?: AxiosRequestConfig) {
    return GroupsApiFp(this.configuration)
      .getGroupUsers(groupIdentifier, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * The catalog contains one or more groups. By default, there is 3 reserved groups (Internet, Intranet, Guest) and a sample group.<br/>This service returns all catalog groups when not authenticated or when current is user is an administrator. The list can contains or not reserved groups depending on the parameters.<br/>When authenticated, return user groups optionally filtered on a specific user profile.
   * @summary Get groups
   * @param {boolean} [withReservedGroup] Including Internet, Intranet, Guest groups or not
   * @param {string} [profile] For a specific profile
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public getGroups(
    withReservedGroup?: boolean,
    profile?: string,
    options?: AxiosRequestConfig
  ) {
    return GroupsApiFp(this.configuration)
      .getGroups(withReservedGroup, profile, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a group
   * @param {number} groupIdentifier Group identifier
   * @param {Group} group
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public updateGroup(
    groupIdentifier: number,
    group: Group,
    options?: AxiosRequestConfig
  ) {
    return GroupsApiFp(this.configuration)
      .updateGroup(groupIdentifier, group, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork 4.0.6 OpenAPI Documentation
 * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.
 *
 * The version of the OpenAPI document: 4.0.6
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
import { Configuration } from "../../../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../../../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../../../base";
// @ts-ignore
import { AnonymousMapserver } from "../../..//geonetwork-openapi/model";
// @ts-ignore
import { MapServer } from "../../..//geonetwork-openapi/model";
/**
 * MapserversApi - axios parameter creator
 * @export
 */
export const MapserversApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Return the id of the newly created mapserver.
     * @summary Add a mapserver
     * @param {MapServer} mapServer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMapserver: async (
      mapServer: MapServer,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'mapServer' is not null or undefined
      assertParamExists("addMapserver", "mapServer", mapServer);
      const localVarPath = `/mapservers`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        mapServer,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove a mapserver
     * @param {number} mapserverId Mapserver identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMapserver: async (
      mapserverId: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'mapserverId' is not null or undefined
      assertParamExists("deleteMapserver", "mapserverId", mapserverId);
      const localVarPath = `/mapservers/{mapserverId}`.replace(
        `{${"mapserverId"}}`,
        encodeURIComponent(String(mapserverId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove a metadata mapserver resource
     * @param {string} mapserverId Mapserver identifier
     * @param {string} metadataUuid Record UUID.
     * @param {string} resource Resource name (could be a file or a db connection)
     * @param {string} [metadataTitle] Metadata title
     * @param {string} [metadataAbstract] Metadata abstract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMapserverResource: async (
      mapserverId: string,
      metadataUuid: string,
      resource: string,
      metadataTitle?: string,
      metadataAbstract?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'mapserverId' is not null or undefined
      assertParamExists("deleteMapserverResource", "mapserverId", mapserverId);
      // verify required parameter 'metadataUuid' is not null or undefined
      assertParamExists(
        "deleteMapserverResource",
        "metadataUuid",
        metadataUuid
      );
      // verify required parameter 'resource' is not null or undefined
      assertParamExists("deleteMapserverResource", "resource", resource);
      const localVarPath = `/mapservers/{mapserverId}/records/{metadataUuid}`
        .replace(`{${"mapserverId"}}`, encodeURIComponent(String(mapserverId)))
        .replace(
          `{${"metadataUuid"}}`,
          encodeURIComponent(String(metadataUuid))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (resource !== undefined) {
        localVarQueryParameter["resource"] = resource;
      }

      if (metadataTitle !== undefined) {
        localVarQueryParameter["metadataTitle"] = metadataTitle;
      }

      if (metadataAbstract !== undefined) {
        localVarQueryParameter["metadataAbstract"] = metadataAbstract;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a mapserver
     * @param {string} mapserverId Mapserver identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMapserver: async (
      mapserverId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'mapserverId' is not null or undefined
      assertParamExists("getMapserver", "mapserverId", mapserverId);
      const localVarPath = `/mapservers/{mapserverId}`.replace(
        `{${"mapserverId"}}`,
        encodeURIComponent(String(mapserverId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Check metadata mapserver resource is published
     * @param {string} mapserverId Mapserver identifier
     * @param {string} metadataUuid Record UUID.
     * @param {string} resource Resource name (could be a file or a db connection)
     * @param {string} [metadataTitle] Metadata title
     * @param {string} [metadataAbstract] Metadata abstract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMapserverResource: async (
      mapserverId: string,
      metadataUuid: string,
      resource: string,
      metadataTitle?: string,
      metadataAbstract?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'mapserverId' is not null or undefined
      assertParamExists("getMapserverResource", "mapserverId", mapserverId);
      // verify required parameter 'metadataUuid' is not null or undefined
      assertParamExists("getMapserverResource", "metadataUuid", metadataUuid);
      // verify required parameter 'resource' is not null or undefined
      assertParamExists("getMapserverResource", "resource", resource);
      const localVarPath = `/mapservers/{mapserverId}/records/{metadataUuid}`
        .replace(`{${"mapserverId"}}`, encodeURIComponent(String(mapserverId)))
        .replace(
          `{${"metadataUuid"}}`,
          encodeURIComponent(String(metadataUuid))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (resource !== undefined) {
        localVarQueryParameter["resource"] = resource;
      }

      if (metadataTitle !== undefined) {
        localVarQueryParameter["metadataTitle"] = metadataTitle;
      }

      if (metadataAbstract !== undefined) {
        localVarQueryParameter["metadataAbstract"] = metadataAbstract;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Mapservers are used by the catalog to publish record attachments (eg. ZIP file with shape) or record associated resources (eg. database table, file on the local network) in a remote mapserver like GeoServer or MapServer. The catalog communicate with the mapserver using GeoServer REST API.
     * @summary Get mapservers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMapservers: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/mapservers`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Publish a metadata resource in a mapserver
     * @param {string} mapserverId Mapserver identifier
     * @param {string} metadataUuid Record UUID.
     * @param {string} resource Resource name (could be a file or a db connection)
     * @param {string} [metadataTitle] Metadata title
     * @param {string} [metadataAbstract] Metadata abstract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publishMapserverResource: async (
      mapserverId: string,
      metadataUuid: string,
      resource: string,
      metadataTitle?: string,
      metadataAbstract?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'mapserverId' is not null or undefined
      assertParamExists("publishMapserverResource", "mapserverId", mapserverId);
      // verify required parameter 'metadataUuid' is not null or undefined
      assertParamExists(
        "publishMapserverResource",
        "metadataUuid",
        metadataUuid
      );
      // verify required parameter 'resource' is not null or undefined
      assertParamExists("publishMapserverResource", "resource", resource);
      const localVarPath = `/mapservers/{mapserverId}/records/{metadataUuid}`
        .replace(`{${"mapserverId"}}`, encodeURIComponent(String(mapserverId)))
        .replace(
          `{${"metadataUuid"}}`,
          encodeURIComponent(String(metadataUuid))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (resource !== undefined) {
        localVarQueryParameter["resource"] = resource;
      }

      if (metadataTitle !== undefined) {
        localVarQueryParameter["metadataTitle"] = metadataTitle;
      }

      if (metadataAbstract !== undefined) {
        localVarQueryParameter["metadataAbstract"] = metadataAbstract;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * The remote mapserver REST API may require basic authentication. This operation set the username and password.
     * @summary Update a mapserver authentication
     * @param {number} mapserverId Mapserver identifier
     * @param {string} username User name
     * @param {string} password Password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMapserver: async (
      mapserverId: number,
      username: string,
      password: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'mapserverId' is not null or undefined
      assertParamExists("updateMapserver", "mapserverId", mapserverId);
      // verify required parameter 'username' is not null or undefined
      assertParamExists("updateMapserver", "username", username);
      // verify required parameter 'password' is not null or undefined
      assertParamExists("updateMapserver", "password", password);
      const localVarPath = `/mapservers/{mapserverId}/auth`.replace(
        `{${"mapserverId"}}`,
        encodeURIComponent(String(mapserverId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (username !== undefined) {
        localVarQueryParameter["username"] = username;
      }

      if (password !== undefined) {
        localVarQueryParameter["password"] = password;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a mapserver
     * @param {number} mapserverId Mapserver identifier
     * @param {MapServer} mapServer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMapserver1: async (
      mapserverId: number,
      mapServer: MapServer,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'mapserverId' is not null or undefined
      assertParamExists("updateMapserver1", "mapserverId", mapserverId);
      // verify required parameter 'mapServer' is not null or undefined
      assertParamExists("updateMapserver1", "mapServer", mapServer);
      const localVarPath = `/mapservers/{mapserverId}`.replace(
        `{${"mapserverId"}}`,
        encodeURIComponent(String(mapserverId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        mapServer,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * MapserversApi - functional programming interface
 * @export
 */
export const MapserversApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    MapserversApiAxiosParamCreator(configuration);
  return {
    /**
     * Return the id of the newly created mapserver.
     * @summary Add a mapserver
     * @param {MapServer} mapServer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addMapserver(
      mapServer: MapServer,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addMapserver(
        mapServer,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Remove a mapserver
     * @param {number} mapserverId Mapserver identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteMapserver(
      mapserverId: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMapserver(
        mapserverId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Remove a metadata mapserver resource
     * @param {string} mapserverId Mapserver identifier
     * @param {string} metadataUuid Record UUID.
     * @param {string} resource Resource name (could be a file or a db connection)
     * @param {string} [metadataTitle] Metadata title
     * @param {string} [metadataAbstract] Metadata abstract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteMapserverResource(
      mapserverId: string,
      metadataUuid: string,
      resource: string,
      metadataTitle?: string,
      metadataAbstract?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteMapserverResource(
          mapserverId,
          metadataUuid,
          resource,
          metadataTitle,
          metadataAbstract,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get a mapserver
     * @param {string} mapserverId Mapserver identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMapserver(
      mapserverId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMapserver(
        mapserverId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Check metadata mapserver resource is published
     * @param {string} mapserverId Mapserver identifier
     * @param {string} metadataUuid Record UUID.
     * @param {string} resource Resource name (could be a file or a db connection)
     * @param {string} [metadataTitle] Metadata title
     * @param {string} [metadataAbstract] Metadata abstract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMapserverResource(
      mapserverId: string,
      metadataUuid: string,
      resource: string,
      metadataTitle?: string,
      metadataAbstract?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getMapserverResource(
          mapserverId,
          metadataUuid,
          resource,
          metadataTitle,
          metadataAbstract,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Mapservers are used by the catalog to publish record attachments (eg. ZIP file with shape) or record associated resources (eg. database table, file on the local network) in a remote mapserver like GeoServer or MapServer. The catalog communicate with the mapserver using GeoServer REST API.
     * @summary Get mapservers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMapservers(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMapservers(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Publish a metadata resource in a mapserver
     * @param {string} mapserverId Mapserver identifier
     * @param {string} metadataUuid Record UUID.
     * @param {string} resource Resource name (could be a file or a db connection)
     * @param {string} [metadataTitle] Metadata title
     * @param {string} [metadataAbstract] Metadata abstract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async publishMapserverResource(
      mapserverId: string,
      metadataUuid: string,
      resource: string,
      metadataTitle?: string,
      metadataAbstract?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.publishMapserverResource(
          mapserverId,
          metadataUuid,
          resource,
          metadataTitle,
          metadataAbstract,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * The remote mapserver REST API may require basic authentication. This operation set the username and password.
     * @summary Update a mapserver authentication
     * @param {number} mapserverId Mapserver identifier
     * @param {string} username User name
     * @param {string} password Password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateMapserver(
      mapserverId: number,
      username: string,
      password: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateMapserver(
        mapserverId,
        username,
        password,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update a mapserver
     * @param {number} mapserverId Mapserver identifier
     * @param {MapServer} mapServer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateMapserver1(
      mapserverId: number,
      mapServer: MapServer,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateMapserver1(
          mapserverId,
          mapServer,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * MapserversApi - factory interface
 * @export
 */
export const MapserversApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = MapserversApiFp(configuration);
  return {
    /**
     * Return the id of the newly created mapserver.
     * @summary Add a mapserver
     * @param {MapServer} mapServer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMapserver(mapServer: MapServer, options?: any): AxiosPromise<number> {
      return localVarFp
        .addMapserver(mapServer, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove a mapserver
     * @param {number} mapserverId Mapserver identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMapserver(mapserverId: number, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteMapserver(mapserverId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove a metadata mapserver resource
     * @param {string} mapserverId Mapserver identifier
     * @param {string} metadataUuid Record UUID.
     * @param {string} resource Resource name (could be a file or a db connection)
     * @param {string} [metadataTitle] Metadata title
     * @param {string} [metadataAbstract] Metadata abstract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMapserverResource(
      mapserverId: string,
      metadataUuid: string,
      resource: string,
      metadataTitle?: string,
      metadataAbstract?: string,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .deleteMapserverResource(
          mapserverId,
          metadataUuid,
          resource,
          metadataTitle,
          metadataAbstract,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a mapserver
     * @param {string} mapserverId Mapserver identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMapserver(mapserverId: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .getMapserver(mapserverId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Check metadata mapserver resource is published
     * @param {string} mapserverId Mapserver identifier
     * @param {string} metadataUuid Record UUID.
     * @param {string} resource Resource name (could be a file or a db connection)
     * @param {string} [metadataTitle] Metadata title
     * @param {string} [metadataAbstract] Metadata abstract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMapserverResource(
      mapserverId: string,
      metadataUuid: string,
      resource: string,
      metadataTitle?: string,
      metadataAbstract?: string,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .getMapserverResource(
          mapserverId,
          metadataUuid,
          resource,
          metadataTitle,
          metadataAbstract,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Mapservers are used by the catalog to publish record attachments (eg. ZIP file with shape) or record associated resources (eg. database table, file on the local network) in a remote mapserver like GeoServer or MapServer. The catalog communicate with the mapserver using GeoServer REST API.
     * @summary Get mapservers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMapservers(options?: any): AxiosPromise<void> {
      return localVarFp
        .getMapservers(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Publish a metadata resource in a mapserver
     * @param {string} mapserverId Mapserver identifier
     * @param {string} metadataUuid Record UUID.
     * @param {string} resource Resource name (could be a file or a db connection)
     * @param {string} [metadataTitle] Metadata title
     * @param {string} [metadataAbstract] Metadata abstract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publishMapserverResource(
      mapserverId: string,
      metadataUuid: string,
      resource: string,
      metadataTitle?: string,
      metadataAbstract?: string,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .publishMapserverResource(
          mapserverId,
          metadataUuid,
          resource,
          metadataTitle,
          metadataAbstract,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * The remote mapserver REST API may require basic authentication. This operation set the username and password.
     * @summary Update a mapserver authentication
     * @param {number} mapserverId Mapserver identifier
     * @param {string} username User name
     * @param {string} password Password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMapserver(
      mapserverId: number,
      username: string,
      password: string,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .updateMapserver(mapserverId, username, password, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a mapserver
     * @param {number} mapserverId Mapserver identifier
     * @param {MapServer} mapServer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMapserver1(
      mapserverId: number,
      mapServer: MapServer,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .updateMapserver1(mapserverId, mapServer, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * MapserversApi - object-oriented interface
 * @export
 * @class MapserversApi
 * @extends {BaseAPI}
 */
export class MapserversApi extends BaseAPI {
  /**
   * Return the id of the newly created mapserver.
   * @summary Add a mapserver
   * @param {MapServer} mapServer
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MapserversApi
   */
  public addMapserver(mapServer: MapServer, options?: AxiosRequestConfig) {
    return MapserversApiFp(this.configuration)
      .addMapserver(mapServer, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Remove a mapserver
   * @param {number} mapserverId Mapserver identifier
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MapserversApi
   */
  public deleteMapserver(mapserverId: number, options?: AxiosRequestConfig) {
    return MapserversApiFp(this.configuration)
      .deleteMapserver(mapserverId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Remove a metadata mapserver resource
   * @param {string} mapserverId Mapserver identifier
   * @param {string} metadataUuid Record UUID.
   * @param {string} resource Resource name (could be a file or a db connection)
   * @param {string} [metadataTitle] Metadata title
   * @param {string} [metadataAbstract] Metadata abstract
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MapserversApi
   */
  public deleteMapserverResource(
    mapserverId: string,
    metadataUuid: string,
    resource: string,
    metadataTitle?: string,
    metadataAbstract?: string,
    options?: AxiosRequestConfig
  ) {
    return MapserversApiFp(this.configuration)
      .deleteMapserverResource(
        mapserverId,
        metadataUuid,
        resource,
        metadataTitle,
        metadataAbstract,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a mapserver
   * @param {string} mapserverId Mapserver identifier
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MapserversApi
   */
  public getMapserver(mapserverId: string, options?: AxiosRequestConfig) {
    return MapserversApiFp(this.configuration)
      .getMapserver(mapserverId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Check metadata mapserver resource is published
   * @param {string} mapserverId Mapserver identifier
   * @param {string} metadataUuid Record UUID.
   * @param {string} resource Resource name (could be a file or a db connection)
   * @param {string} [metadataTitle] Metadata title
   * @param {string} [metadataAbstract] Metadata abstract
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MapserversApi
   */
  public getMapserverResource(
    mapserverId: string,
    metadataUuid: string,
    resource: string,
    metadataTitle?: string,
    metadataAbstract?: string,
    options?: AxiosRequestConfig
  ) {
    return MapserversApiFp(this.configuration)
      .getMapserverResource(
        mapserverId,
        metadataUuid,
        resource,
        metadataTitle,
        metadataAbstract,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Mapservers are used by the catalog to publish record attachments (eg. ZIP file with shape) or record associated resources (eg. database table, file on the local network) in a remote mapserver like GeoServer or MapServer. The catalog communicate with the mapserver using GeoServer REST API.
   * @summary Get mapservers
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MapserversApi
   */
  public getMapservers(options?: AxiosRequestConfig) {
    return MapserversApiFp(this.configuration)
      .getMapservers(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Publish a metadata resource in a mapserver
   * @param {string} mapserverId Mapserver identifier
   * @param {string} metadataUuid Record UUID.
   * @param {string} resource Resource name (could be a file or a db connection)
   * @param {string} [metadataTitle] Metadata title
   * @param {string} [metadataAbstract] Metadata abstract
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MapserversApi
   */
  public publishMapserverResource(
    mapserverId: string,
    metadataUuid: string,
    resource: string,
    metadataTitle?: string,
    metadataAbstract?: string,
    options?: AxiosRequestConfig
  ) {
    return MapserversApiFp(this.configuration)
      .publishMapserverResource(
        mapserverId,
        metadataUuid,
        resource,
        metadataTitle,
        metadataAbstract,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * The remote mapserver REST API may require basic authentication. This operation set the username and password.
   * @summary Update a mapserver authentication
   * @param {number} mapserverId Mapserver identifier
   * @param {string} username User name
   * @param {string} password Password
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MapserversApi
   */
  public updateMapserver(
    mapserverId: number,
    username: string,
    password: string,
    options?: AxiosRequestConfig
  ) {
    return MapserversApiFp(this.configuration)
      .updateMapserver(mapserverId, username, password, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a mapserver
   * @param {number} mapserverId Mapserver identifier
   * @param {MapServer} mapServer
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MapserversApi
   */
  public updateMapserver1(
    mapserverId: number,
    mapServer: MapServer,
    options?: AxiosRequestConfig
  ) {
    return MapserversApiFp(this.configuration)
      .updateMapserver1(mapserverId, mapServer, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork 4.0.6 OpenAPI Documentation
 * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.
 *
 * The version of the OpenAPI document: 4.0.6
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
import { Configuration } from "../../../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../../../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../../../base";
// @ts-ignore
import { StatusValue } from "../../..//geonetwork-openapi/model";
/**
 * StatusApi - axios parameter creator
 * @export
 */
export const StatusApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Delete all record history and status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAllHistoryAndStatus: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/status`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get status by type
     * @param {'workflow' | 'task' | 'event'} type Type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStatusByType: async (
      type: "workflow" | "task" | "event",
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'type' is not null or undefined
      assertParamExists("getStatusByType", "type", type);
      const localVarPath = `/status/{type}`.replace(
        `{${"type"}}`,
        encodeURIComponent(String(type))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStatusList: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/status`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * StatusApi - functional programming interface
 * @export
 */
export const StatusApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = StatusApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Delete all record history and status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteAllHistoryAndStatus(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteAllHistoryAndStatus(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get status by type
     * @param {'workflow' | 'task' | 'event'} type Type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getStatusByType(
      type: "workflow" | "task" | "event",
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<StatusValue>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getStatusByType(
        type,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getStatusList(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<StatusValue>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getStatusList(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * StatusApi - factory interface
 * @export
 */
export const StatusApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = StatusApiFp(configuration);
  return {
    /**
     *
     * @summary Delete all record history and status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAllHistoryAndStatus(options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteAllHistoryAndStatus(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get status by type
     * @param {'workflow' | 'task' | 'event'} type Type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStatusByType(
      type: "workflow" | "task" | "event",
      options?: any
    ): AxiosPromise<Array<StatusValue>> {
      return localVarFp
        .getStatusByType(type, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStatusList(options?: any): AxiosPromise<Array<StatusValue>> {
      return localVarFp
        .getStatusList(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * StatusApi - object-oriented interface
 * @export
 * @class StatusApi
 * @extends {BaseAPI}
 */
export class StatusApi extends BaseAPI {
  /**
   *
   * @summary Delete all record history and status
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StatusApi
   */
  public deleteAllHistoryAndStatus(options?: AxiosRequestConfig) {
    return StatusApiFp(this.configuration)
      .deleteAllHistoryAndStatus(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get status by type
   * @param {'workflow' | 'task' | 'event'} type Type
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StatusApi
   */
  public getStatusByType(
    type: "workflow" | "task" | "event",
    options?: AxiosRequestConfig
  ) {
    return StatusApiFp(this.configuration)
      .getStatusByType(type, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get status
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StatusApi
   */
  public getStatusList(options?: AxiosRequestConfig) {
    return StatusApiFp(this.configuration)
      .getStatusList(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

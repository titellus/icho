/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork 4.0.6 OpenAPI Documentation
 * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.
 *
 * The version of the OpenAPI document: 4.0.6
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
import { Configuration } from "../../../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../../../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../../../base";
// @ts-ignore
import { Category } from "../../..//geonetwork-openapi/model";
// @ts-ignore
import { ListRegionsResponse } from "../../..//geonetwork-openapi/model";
/**
 * RegionsApi - axios parameter creator
 * @export
 */
export const RegionsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * A rendering of the geometry as a png.
     * @summary Get geometry as image
     * @param {string} [mapsrs]
     * @param {number} [width] (optional) width of the image that is created. Only one of width and height are permitted
     * @param {number} [height] (optional) height of the image that is created. Only one of width and height are permitted
     * @param {string} [background] (optional) URL for loading a background image for regions or a key that references the namedBackgrounds (configured in config-spring-geonetwork.xml). A WMS Getmap request is the typical example. The URL must be parameterized with the following parameters: minx, maxx, miny, maxy, width, height
     * @param {string} [geom] (optional) a wkt or gml encoded geometry.
     * @param {string} [geomtype] (optional) defines if geom is wkt or gml. Allowed values are wkt and gml. if not specified the it is assumed the geometry is wkt
     * @param {string} [geomsrs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGeomAsImage: async (
      mapsrs?: string,
      width?: number,
      height?: number,
      background?: string,
      geom?: string,
      geomtype?: string,
      geomsrs?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/regions/geom.png`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (mapsrs !== undefined) {
        localVarQueryParameter["mapsrs"] = mapsrs;
      }

      if (width !== undefined) {
        localVarQueryParameter["width"] = width;
      }

      if (height !== undefined) {
        localVarQueryParameter["height"] = height;
      }

      if (background !== undefined) {
        localVarQueryParameter["background"] = background;
      }

      if (geom !== undefined) {
        localVarQueryParameter["geom"] = geom;
      }

      if (geomtype !== undefined) {
        localVarQueryParameter["geomtype"] = geomtype;
      }

      if (geomsrs !== undefined) {
        localVarQueryParameter["geomsrs"] = geomsrs;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get list of region types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRegionTypes: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/regions/types`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get list of regions
     * @param {string} [label]
     * @param {string} [categoryId]
     * @param {number} [maxRecords]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRegions: async (
      label?: string,
      categoryId?: string,
      maxRecords?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/regions`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (label !== undefined) {
        localVarQueryParameter["label"] = label;
      }

      if (categoryId !== undefined) {
        localVarQueryParameter["categoryId"] = categoryId;
      }

      if (maxRecords !== undefined) {
        localVarQueryParameter["maxRecords"] = maxRecords;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * RegionsApi - functional programming interface
 * @export
 */
export const RegionsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = RegionsApiAxiosParamCreator(configuration);
  return {
    /**
     * A rendering of the geometry as a png.
     * @summary Get geometry as image
     * @param {string} [mapsrs]
     * @param {number} [width] (optional) width of the image that is created. Only one of width and height are permitted
     * @param {number} [height] (optional) height of the image that is created. Only one of width and height are permitted
     * @param {string} [background] (optional) URL for loading a background image for regions or a key that references the namedBackgrounds (configured in config-spring-geonetwork.xml). A WMS Getmap request is the typical example. The URL must be parameterized with the following parameters: minx, maxx, miny, maxy, width, height
     * @param {string} [geom] (optional) a wkt or gml encoded geometry.
     * @param {string} [geomtype] (optional) defines if geom is wkt or gml. Allowed values are wkt and gml. if not specified the it is assumed the geometry is wkt
     * @param {string} [geomsrs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getGeomAsImage(
      mapsrs?: string,
      width?: number,
      height?: number,
      background?: string,
      geom?: string,
      geomtype?: string,
      geomsrs?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getGeomAsImage(
        mapsrs,
        width,
        height,
        background,
        geom,
        geomtype,
        geomsrs,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get list of region types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getRegionTypes(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<Category>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getRegionTypes(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get list of regions
     * @param {string} [label]
     * @param {string} [categoryId]
     * @param {number} [maxRecords]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getRegions(
      label?: string,
      categoryId?: string,
      maxRecords?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ListRegionsResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getRegions(
        label,
        categoryId,
        maxRecords,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * RegionsApi - factory interface
 * @export
 */
export const RegionsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = RegionsApiFp(configuration);
  return {
    /**
     * A rendering of the geometry as a png.
     * @summary Get geometry as image
     * @param {string} [mapsrs]
     * @param {number} [width] (optional) width of the image that is created. Only one of width and height are permitted
     * @param {number} [height] (optional) height of the image that is created. Only one of width and height are permitted
     * @param {string} [background] (optional) URL for loading a background image for regions or a key that references the namedBackgrounds (configured in config-spring-geonetwork.xml). A WMS Getmap request is the typical example. The URL must be parameterized with the following parameters: minx, maxx, miny, maxy, width, height
     * @param {string} [geom] (optional) a wkt or gml encoded geometry.
     * @param {string} [geomtype] (optional) defines if geom is wkt or gml. Allowed values are wkt and gml. if not specified the it is assumed the geometry is wkt
     * @param {string} [geomsrs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGeomAsImage(
      mapsrs?: string,
      width?: number,
      height?: number,
      background?: string,
      geom?: string,
      geomtype?: string,
      geomsrs?: string,
      options?: any
    ): AxiosPromise<Array<string>> {
      return localVarFp
        .getGeomAsImage(
          mapsrs,
          width,
          height,
          background,
          geom,
          geomtype,
          geomsrs,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get list of region types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRegionTypes(options?: any): AxiosPromise<Array<Category>> {
      return localVarFp
        .getRegionTypes(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get list of regions
     * @param {string} [label]
     * @param {string} [categoryId]
     * @param {number} [maxRecords]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRegions(
      label?: string,
      categoryId?: string,
      maxRecords?: number,
      options?: any
    ): AxiosPromise<ListRegionsResponse> {
      return localVarFp
        .getRegions(label, categoryId, maxRecords, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * RegionsApi - object-oriented interface
 * @export
 * @class RegionsApi
 * @extends {BaseAPI}
 */
export class RegionsApi extends BaseAPI {
  /**
   * A rendering of the geometry as a png.
   * @summary Get geometry as image
   * @param {string} [mapsrs]
   * @param {number} [width] (optional) width of the image that is created. Only one of width and height are permitted
   * @param {number} [height] (optional) height of the image that is created. Only one of width and height are permitted
   * @param {string} [background] (optional) URL for loading a background image for regions or a key that references the namedBackgrounds (configured in config-spring-geonetwork.xml). A WMS Getmap request is the typical example. The URL must be parameterized with the following parameters: minx, maxx, miny, maxy, width, height
   * @param {string} [geom] (optional) a wkt or gml encoded geometry.
   * @param {string} [geomtype] (optional) defines if geom is wkt or gml. Allowed values are wkt and gml. if not specified the it is assumed the geometry is wkt
   * @param {string} [geomsrs]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RegionsApi
   */
  public getGeomAsImage(
    mapsrs?: string,
    width?: number,
    height?: number,
    background?: string,
    geom?: string,
    geomtype?: string,
    geomsrs?: string,
    options?: AxiosRequestConfig
  ) {
    return RegionsApiFp(this.configuration)
      .getGeomAsImage(
        mapsrs,
        width,
        height,
        background,
        geom,
        geomtype,
        geomsrs,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get list of region types
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RegionsApi
   */
  public getRegionTypes(options?: AxiosRequestConfig) {
    return RegionsApiFp(this.configuration)
      .getRegionTypes(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get list of regions
   * @param {string} [label]
   * @param {string} [categoryId]
   * @param {number} [maxRecords]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RegionsApi
   */
  public getRegions(
    label?: string,
    categoryId?: string,
    maxRecords?: number,
    options?: AxiosRequestConfig
  ) {
    return RegionsApiFp(this.configuration)
      .getRegions(label, categoryId, maxRecords, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

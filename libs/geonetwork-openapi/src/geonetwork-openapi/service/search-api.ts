/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork 4.0.6 OpenAPI Documentation
 * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.
 *
 * The version of the OpenAPI document: 4.0.6
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
import { Configuration } from "../../../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../../../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../../../base";
/**
 * SearchApi - axios parameter creator
 * @export
 */
export const SearchApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * See https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html for search parameters details.
     * @summary Search endpoint
     * @param {string} [bucket]
     * @param {string} [body] JSON request based on Elasticsearch API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    msearch: async (
      bucket?: string,
      body?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/search/records/_msearch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (bucket !== undefined) {
        localVarQueryParameter["bucket"] = bucket;
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * See https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html for search parameters details.
     * @summary Search endpoint
     * @param {string} [bucket]
     * @param {string} [body] JSON request based on Elasticsearch API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    search: async (
      bucket?: string,
      body?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/search/records/_search`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (bucket !== undefined) {
        localVarQueryParameter["bucket"] = bucket;
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SearchApi - functional programming interface
 * @export
 */
export const SearchApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = SearchApiAxiosParamCreator(configuration);
  return {
    /**
     * See https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html for search parameters details.
     * @summary Search endpoint
     * @param {string} [bucket]
     * @param {string} [body] JSON request based on Elasticsearch API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async msearch(
      bucket?: string,
      body?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.msearch(
        bucket,
        body,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * See https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html for search parameters details.
     * @summary Search endpoint
     * @param {string} [bucket]
     * @param {string} [body] JSON request based on Elasticsearch API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async search(
      bucket?: string,
      body?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.search(
        bucket,
        body,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * SearchApi - factory interface
 * @export
 */
export const SearchApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = SearchApiFp(configuration);
  return {
    /**
     * See https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html for search parameters details.
     * @summary Search endpoint
     * @param {string} [bucket]
     * @param {string} [body] JSON request based on Elasticsearch API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    msearch(bucket?: string, body?: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .msearch(bucket, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * See https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html for search parameters details.
     * @summary Search endpoint
     * @param {string} [bucket]
     * @param {string} [body] JSON request based on Elasticsearch API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    search(bucket?: string, body?: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .search(bucket, body, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
export class SearchApi extends BaseAPI {
  /**
   * See https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html for search parameters details.
   * @summary Search endpoint
   * @param {string} [bucket]
   * @param {string} [body] JSON request based on Elasticsearch API.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public msearch(bucket?: string, body?: string, options?: AxiosRequestConfig) {
    return SearchApiFp(this.configuration)
      .msearch(bucket, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * See https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html for search parameters details.
   * @summary Search endpoint
   * @param {string} [bucket]
   * @param {string} [body] JSON request based on Elasticsearch API.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public search(bucket?: string, body?: string, options?: AxiosRequestConfig) {
    return SearchApiFp(this.configuration)
      .search(bucket, body, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

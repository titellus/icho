/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork 4.0.6 OpenAPI Documentation
 * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.
 *
 * The version of the OpenAPI document: 4.0.6
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
import { Configuration } from "../../../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../../../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../../../base";
// @ts-ignore
import { UiSetting } from "../../..//geonetwork-openapi/model";
/**
 * UiApi - axios parameter creator
 * @export
 */
export const UiApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Remove a UI Configuration
     * @param {string} uiIdentifier UI configuration identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUiConfiguration: async (
      uiIdentifier: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'uiIdentifier' is not null or undefined
      assertParamExists("deleteUiConfiguration", "uiIdentifier", uiIdentifier);
      const localVarPath = `/ui/{uiIdentifier}`.replace(
        `{${"uiIdentifier"}}`,
        encodeURIComponent(String(uiIdentifier))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a UI configuration
     * @param {string} uiIdentifier UI identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUiConfiguration: async (
      uiIdentifier: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'uiIdentifier' is not null or undefined
      assertParamExists("getUiConfiguration", "uiIdentifier", uiIdentifier);
      const localVarPath = `/ui/{uiIdentifier}`.replace(
        `{${"uiIdentifier"}}`,
        encodeURIComponent(String(uiIdentifier))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get UI configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUiConfigurations: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/ui`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a UI configuration
     * @param {UiSetting} uiSetting
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUiConfiguration: async (
      uiSetting: UiSetting,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'uiSetting' is not null or undefined
      assertParamExists("putUiConfiguration", "uiSetting", uiSetting);
      const localVarPath = `/ui`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        uiSetting,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a UI configuration
     * @param {string} uiIdentifier UI configuration identifier
     * @param {UiSetting} uiSetting
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUiConfiguration: async (
      uiIdentifier: string,
      uiSetting: UiSetting,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'uiIdentifier' is not null or undefined
      assertParamExists("updateUiConfiguration", "uiIdentifier", uiIdentifier);
      // verify required parameter 'uiSetting' is not null or undefined
      assertParamExists("updateUiConfiguration", "uiSetting", uiSetting);
      const localVarPath = `/ui/{uiIdentifier}`.replace(
        `{${"uiIdentifier"}}`,
        encodeURIComponent(String(uiIdentifier))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        uiSetting,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UiApi - functional programming interface
 * @export
 */
export const UiApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UiApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Remove a UI Configuration
     * @param {string} uiIdentifier UI configuration identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteUiConfiguration(
      uiIdentifier: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteUiConfiguration(
          uiIdentifier,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get a UI configuration
     * @param {string} uiIdentifier UI identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUiConfiguration(
      uiIdentifier: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UiSetting>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getUiConfiguration(
          uiIdentifier,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get UI configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUiConfigurations(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<UiSetting>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getUiConfigurations(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Create a UI configuration
     * @param {UiSetting} uiSetting
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putUiConfiguration(
      uiSetting: UiSetting,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.putUiConfiguration(uiSetting, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update a UI configuration
     * @param {string} uiIdentifier UI configuration identifier
     * @param {UiSetting} uiSetting
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateUiConfiguration(
      uiIdentifier: string,
      uiSetting: UiSetting,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateUiConfiguration(
          uiIdentifier,
          uiSetting,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * UiApi - factory interface
 * @export
 */
export const UiApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UiApiFp(configuration);
  return {
    /**
     *
     * @summary Remove a UI Configuration
     * @param {string} uiIdentifier UI configuration identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUiConfiguration(
      uiIdentifier: string,
      options?: any
    ): AxiosPromise<string> {
      return localVarFp
        .deleteUiConfiguration(uiIdentifier, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a UI configuration
     * @param {string} uiIdentifier UI identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUiConfiguration(
      uiIdentifier: string,
      options?: any
    ): AxiosPromise<UiSetting> {
      return localVarFp
        .getUiConfiguration(uiIdentifier, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get UI configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUiConfigurations(options?: any): AxiosPromise<Array<UiSetting>> {
      return localVarFp
        .getUiConfigurations(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a UI configuration
     * @param {UiSetting} uiSetting
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUiConfiguration(
      uiSetting: UiSetting,
      options?: any
    ): AxiosPromise<string> {
      return localVarFp
        .putUiConfiguration(uiSetting, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a UI configuration
     * @param {string} uiIdentifier UI configuration identifier
     * @param {UiSetting} uiSetting
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUiConfiguration(
      uiIdentifier: string,
      uiSetting: UiSetting,
      options?: any
    ): AxiosPromise<string> {
      return localVarFp
        .updateUiConfiguration(uiIdentifier, uiSetting, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UiApi - object-oriented interface
 * @export
 * @class UiApi
 * @extends {BaseAPI}
 */
export class UiApi extends BaseAPI {
  /**
   *
   * @summary Remove a UI Configuration
   * @param {string} uiIdentifier UI configuration identifier
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UiApi
   */
  public deleteUiConfiguration(
    uiIdentifier: string,
    options?: AxiosRequestConfig
  ) {
    return UiApiFp(this.configuration)
      .deleteUiConfiguration(uiIdentifier, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a UI configuration
   * @param {string} uiIdentifier UI identifier
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UiApi
   */
  public getUiConfiguration(
    uiIdentifier: string,
    options?: AxiosRequestConfig
  ) {
    return UiApiFp(this.configuration)
      .getUiConfiguration(uiIdentifier, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get UI configuration
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UiApi
   */
  public getUiConfigurations(options?: AxiosRequestConfig) {
    return UiApiFp(this.configuration)
      .getUiConfigurations(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create a UI configuration
   * @param {UiSetting} uiSetting
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UiApi
   */
  public putUiConfiguration(
    uiSetting: UiSetting,
    options?: AxiosRequestConfig
  ) {
    return UiApiFp(this.configuration)
      .putUiConfiguration(uiSetting, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a UI configuration
   * @param {string} uiIdentifier UI configuration identifier
   * @param {UiSetting} uiSetting
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UiApi
   */
  public updateUiConfiguration(
    uiIdentifier: string,
    uiSetting: UiSetting,
    options?: AxiosRequestConfig
  ) {
    return UiApiFp(this.configuration)
      .updateUiConfiguration(uiIdentifier, uiSetting, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork 4.0.6 OpenAPI Documentation
 * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.
 *
 * The version of the OpenAPI document: 4.0.6
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
import { Configuration } from "../../../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../../../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../../../base";
/**
 * LogosApi - axios parameter creator
 * @export
 */
export const LogosApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Add a logo
     * @param {Array<any>} file The logo image to upload
     * @param {boolean} [overwrite] Overwrite if exists
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addLogo: async (
      file: Array<any>,
      overwrite?: boolean,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'file' is not null or undefined
      assertParamExists("addLogo", "file", file);
      const localVarPath = `/logos`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (file) {
        localVarQueryParameter["file"] = file;
      }

      if (overwrite !== undefined) {
        localVarQueryParameter["overwrite"] = overwrite;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove a logo
     * @param {string} file The logo filename to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLogo: async (
      file: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'file' is not null or undefined
      assertParamExists("deleteLogo", "file", file);
      const localVarPath = `/logos/{file}`.replace(
        `{${"file"}}`,
        encodeURIComponent(String(file))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Logos are used for the catalog, the groups logos, and harvester icons. Logos are stored in the data directory in <dataDirectory>/resources/images/harvesting.<br/> Records are attached to a source. A source can be the local catalog or a harvester node. When a source is created, its logo is located in the images/logos folder with the source UUID as filename. For some sources the logo can be automatically retrieved (eg. when harvesting GeoNetwork catalogs). For others, the logo is usually manually defined when configuring the harvester.
     * @summary Get all logos
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLogos: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/logos`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * LogosApi - functional programming interface
 * @export
 */
export const LogosApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = LogosApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Add a logo
     * @param {Array<any>} file The logo image to upload
     * @param {boolean} [overwrite] Overwrite if exists
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addLogo(
      file: Array<any>,
      overwrite?: boolean,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addLogo(
        file,
        overwrite,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Remove a logo
     * @param {string} file The logo filename to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteLogo(
      file: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLogo(
        file,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Logos are used for the catalog, the groups logos, and harvester icons. Logos are stored in the data directory in <dataDirectory>/resources/images/harvesting.<br/> Records are attached to a source. A source can be the local catalog or a harvester node. When a source is created, its logo is located in the images/logos folder with the source UUID as filename. For some sources the logo can be automatically retrieved (eg. when harvesting GeoNetwork catalogs). For others, the logo is usually manually defined when configuring the harvester.
     * @summary Get all logos
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getLogos(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Set<string>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getLogos(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * LogosApi - factory interface
 * @export
 */
export const LogosApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = LogosApiFp(configuration);
  return {
    /**
     *
     * @summary Add a logo
     * @param {Array<any>} file The logo image to upload
     * @param {boolean} [overwrite] Overwrite if exists
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addLogo(
      file: Array<any>,
      overwrite?: boolean,
      options?: any
    ): AxiosPromise<string> {
      return localVarFp
        .addLogo(file, overwrite, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove a logo
     * @param {string} file The logo filename to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLogo(file: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteLogo(file, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Logos are used for the catalog, the groups logos, and harvester icons. Logos are stored in the data directory in <dataDirectory>/resources/images/harvesting.<br/> Records are attached to a source. A source can be the local catalog or a harvester node. When a source is created, its logo is located in the images/logos folder with the source UUID as filename. For some sources the logo can be automatically retrieved (eg. when harvesting GeoNetwork catalogs). For others, the logo is usually manually defined when configuring the harvester.
     * @summary Get all logos
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLogos(options?: any): AxiosPromise<Set<string>> {
      return localVarFp
        .getLogos(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * LogosApi - object-oriented interface
 * @export
 * @class LogosApi
 * @extends {BaseAPI}
 */
export class LogosApi extends BaseAPI {
  /**
   *
   * @summary Add a logo
   * @param {Array<any>} file The logo image to upload
   * @param {boolean} [overwrite] Overwrite if exists
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LogosApi
   */
  public addLogo(
    file: Array<any>,
    overwrite?: boolean,
    options?: AxiosRequestConfig
  ) {
    return LogosApiFp(this.configuration)
      .addLogo(file, overwrite, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Remove a logo
   * @param {string} file The logo filename to delete
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LogosApi
   */
  public deleteLogo(file: string, options?: AxiosRequestConfig) {
    return LogosApiFp(this.configuration)
      .deleteLogo(file, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Logos are used for the catalog, the groups logos, and harvester icons. Logos are stored in the data directory in <dataDirectory>/resources/images/harvesting.<br/> Records are attached to a source. A source can be the local catalog or a harvester node. When a source is created, its logo is located in the images/logos folder with the source UUID as filename. For some sources the logo can be automatically retrieved (eg. when harvesting GeoNetwork catalogs). For others, the logo is usually manually defined when configuring the harvester.
   * @summary Get all logos
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LogosApi
   */
  public getLogos(options?: AxiosRequestConfig) {
    return LogosApiFp(this.configuration)
      .getLogos(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

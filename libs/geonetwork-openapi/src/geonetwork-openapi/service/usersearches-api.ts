/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork 4.0.6 OpenAPI Documentation
 * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.
 *
 * The version of the OpenAPI document: 4.0.6
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
import { Configuration } from "../../../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../../../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../../../base";
// @ts-ignore
import { PaginatedUserSearchResponse } from "../../..//geonetwork-openapi/model";
// @ts-ignore
import { UserSearchDto } from "../../..//geonetwork-openapi/model";
/**
 * UsersearchesApi - axios parameter creator
 * @export
 */
export const UsersearchesApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Creates a user search.
     * @summary Creates a user search
     * @param {UserSearchDto} userSearchDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserCustomSearch: async (
      userSearchDto: UserSearchDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userSearchDto' is not null or undefined
      assertParamExists(
        "createUserCustomSearch",
        "userSearchDto",
        userSearchDto
      );
      const localVarPath = `/usersearches`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userSearchDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Deletes a user search by identifier.
     * @summary Delete a user search
     * @param {number} searchIdentifier Search identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserCustomSerach: async (
      searchIdentifier: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'searchIdentifier' is not null or undefined
      assertParamExists(
        "deleteUserCustomSerach",
        "searchIdentifier",
        searchIdentifier
      );
      const localVarPath = `/usersearches/{searchIdentifier}`.replace(
        `{${"searchIdentifier"}}`,
        encodeURIComponent(String(searchIdentifier))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get user custom searches for all users (no paginated)
     * @param {'HOME' | 'EDITOR_BOARD'} [featuredType] Featured type search.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllUserCustomSearches: async (
      featuredType?: "HOME" | "EDITOR_BOARD",
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/usersearches/all`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (featuredType !== undefined) {
        localVarQueryParameter["featuredType"] = featuredType;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get user custom searches for all users (paginated)
     * @param {'HOME' | 'EDITOR_BOARD'} [featuredType] Featured  type search.
     * @param {string} [search]
     * @param {number} [offset] From page
     * @param {number} [limit] Number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllUserCustomSearchesPage: async (
      featuredType?: "HOME" | "EDITOR_BOARD",
      search?: string,
      offset?: number,
      limit?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/usersearches/allpaginated`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (featuredType !== undefined) {
        localVarQueryParameter["featuredType"] = featuredType;
      }

      if (search !== undefined) {
        localVarQueryParameter["search"] = search;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get featured user custom searches
     * @param {'HOME' | 'EDITOR_BOARD'} [type] Number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeaturedUserCustomSearches: async (
      type?: "HOME" | "EDITOR_BOARD",
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/usersearches/featured`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (type !== undefined) {
        localVarQueryParameter["type"] = type;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get custom search
     * @param {number} searchIdentifier User search identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserCustomSearch: async (
      searchIdentifier: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'searchIdentifier' is not null or undefined
      assertParamExists(
        "getUserCustomSearch",
        "searchIdentifier",
        searchIdentifier
      );
      const localVarPath = `/usersearches/{searchIdentifier}`.replace(
        `{${"searchIdentifier"}}`,
        encodeURIComponent(String(searchIdentifier))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get user custom searches
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserCustomSearches: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/usersearches`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a user search
     * @param {number} searchIdentifier User search identifier
     * @param {UserSearchDto} userSearchDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomUserSearch: async (
      searchIdentifier: number,
      userSearchDto: UserSearchDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'searchIdentifier' is not null or undefined
      assertParamExists(
        "updateCustomUserSearch",
        "searchIdentifier",
        searchIdentifier
      );
      // verify required parameter 'userSearchDto' is not null or undefined
      assertParamExists(
        "updateCustomUserSearch",
        "userSearchDto",
        userSearchDto
      );
      const localVarPath = `/usersearches/{searchIdentifier}`.replace(
        `{${"searchIdentifier"}}`,
        encodeURIComponent(String(searchIdentifier))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userSearchDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UsersearchesApi - functional programming interface
 * @export
 */
export const UsersearchesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    UsersearchesApiAxiosParamCreator(configuration);
  return {
    /**
     * Creates a user search.
     * @summary Creates a user search
     * @param {UserSearchDto} userSearchDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createUserCustomSearch(
      userSearchDto: UserSearchDto,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createUserCustomSearch(
          userSearchDto,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Deletes a user search by identifier.
     * @summary Delete a user search
     * @param {number} searchIdentifier Search identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteUserCustomSerach(
      searchIdentifier: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteUserCustomSerach(
          searchIdentifier,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get user custom searches for all users (no paginated)
     * @param {'HOME' | 'EDITOR_BOARD'} [featuredType] Featured type search.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllUserCustomSearches(
      featuredType?: "HOME" | "EDITOR_BOARD",
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<UserSearchDto>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getAllUserCustomSearches(
          featuredType,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get user custom searches for all users (paginated)
     * @param {'HOME' | 'EDITOR_BOARD'} [featuredType] Featured  type search.
     * @param {string} [search]
     * @param {number} [offset] From page
     * @param {number} [limit] Number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllUserCustomSearchesPage(
      featuredType?: "HOME" | "EDITOR_BOARD",
      search?: string,
      offset?: number,
      limit?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaginatedUserSearchResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getAllUserCustomSearchesPage(
          featuredType,
          search,
          offset,
          limit,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get featured user custom searches
     * @param {'HOME' | 'EDITOR_BOARD'} [type] Number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getFeaturedUserCustomSearches(
      type?: "HOME" | "EDITOR_BOARD",
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<UserSearchDto>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getFeaturedUserCustomSearches(
          type,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get custom search
     * @param {number} searchIdentifier User search identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserCustomSearch(
      searchIdentifier: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserSearchDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getUserCustomSearch(
          searchIdentifier,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get user custom searches
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserCustomSearches(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<UserSearchDto>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getUserCustomSearches(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update a user search
     * @param {number} searchIdentifier User search identifier
     * @param {UserSearchDto} userSearchDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateCustomUserSearch(
      searchIdentifier: number,
      userSearchDto: UserSearchDto,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateCustomUserSearch(
          searchIdentifier,
          userSearchDto,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * UsersearchesApi - factory interface
 * @export
 */
export const UsersearchesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UsersearchesApiFp(configuration);
  return {
    /**
     * Creates a user search.
     * @summary Creates a user search
     * @param {UserSearchDto} userSearchDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserCustomSearch(
      userSearchDto: UserSearchDto,
      options?: any
    ): AxiosPromise<number> {
      return localVarFp
        .createUserCustomSearch(userSearchDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Deletes a user search by identifier.
     * @summary Delete a user search
     * @param {number} searchIdentifier Search identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserCustomSerach(
      searchIdentifier: number,
      options?: any
    ): AxiosPromise<string> {
      return localVarFp
        .deleteUserCustomSerach(searchIdentifier, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get user custom searches for all users (no paginated)
     * @param {'HOME' | 'EDITOR_BOARD'} [featuredType] Featured type search.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllUserCustomSearches(
      featuredType?: "HOME" | "EDITOR_BOARD",
      options?: any
    ): AxiosPromise<Array<UserSearchDto>> {
      return localVarFp
        .getAllUserCustomSearches(featuredType, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get user custom searches for all users (paginated)
     * @param {'HOME' | 'EDITOR_BOARD'} [featuredType] Featured  type search.
     * @param {string} [search]
     * @param {number} [offset] From page
     * @param {number} [limit] Number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllUserCustomSearchesPage(
      featuredType?: "HOME" | "EDITOR_BOARD",
      search?: string,
      offset?: number,
      limit?: number,
      options?: any
    ): AxiosPromise<PaginatedUserSearchResponse> {
      return localVarFp
        .getAllUserCustomSearchesPage(
          featuredType,
          search,
          offset,
          limit,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get featured user custom searches
     * @param {'HOME' | 'EDITOR_BOARD'} [type] Number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeaturedUserCustomSearches(
      type?: "HOME" | "EDITOR_BOARD",
      options?: any
    ): AxiosPromise<Array<UserSearchDto>> {
      return localVarFp
        .getFeaturedUserCustomSearches(type, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get custom search
     * @param {number} searchIdentifier User search identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserCustomSearch(
      searchIdentifier: number,
      options?: any
    ): AxiosPromise<UserSearchDto> {
      return localVarFp
        .getUserCustomSearch(searchIdentifier, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get user custom searches
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserCustomSearches(options?: any): AxiosPromise<Array<UserSearchDto>> {
      return localVarFp
        .getUserCustomSearches(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a user search
     * @param {number} searchIdentifier User search identifier
     * @param {UserSearchDto} userSearchDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomUserSearch(
      searchIdentifier: number,
      userSearchDto: UserSearchDto,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .updateCustomUserSearch(searchIdentifier, userSearchDto, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UsersearchesApi - object-oriented interface
 * @export
 * @class UsersearchesApi
 * @extends {BaseAPI}
 */
export class UsersearchesApi extends BaseAPI {
  /**
   * Creates a user search.
   * @summary Creates a user search
   * @param {UserSearchDto} userSearchDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersearchesApi
   */
  public createUserCustomSearch(
    userSearchDto: UserSearchDto,
    options?: AxiosRequestConfig
  ) {
    return UsersearchesApiFp(this.configuration)
      .createUserCustomSearch(userSearchDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Deletes a user search by identifier.
   * @summary Delete a user search
   * @param {number} searchIdentifier Search identifier.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersearchesApi
   */
  public deleteUserCustomSerach(
    searchIdentifier: number,
    options?: AxiosRequestConfig
  ) {
    return UsersearchesApiFp(this.configuration)
      .deleteUserCustomSerach(searchIdentifier, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get user custom searches for all users (no paginated)
   * @param {'HOME' | 'EDITOR_BOARD'} [featuredType] Featured type search.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersearchesApi
   */
  public getAllUserCustomSearches(
    featuredType?: "HOME" | "EDITOR_BOARD",
    options?: AxiosRequestConfig
  ) {
    return UsersearchesApiFp(this.configuration)
      .getAllUserCustomSearches(featuredType, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get user custom searches for all users (paginated)
   * @param {'HOME' | 'EDITOR_BOARD'} [featuredType] Featured  type search.
   * @param {string} [search]
   * @param {number} [offset] From page
   * @param {number} [limit] Number of records to return
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersearchesApi
   */
  public getAllUserCustomSearchesPage(
    featuredType?: "HOME" | "EDITOR_BOARD",
    search?: string,
    offset?: number,
    limit?: number,
    options?: AxiosRequestConfig
  ) {
    return UsersearchesApiFp(this.configuration)
      .getAllUserCustomSearchesPage(
        featuredType,
        search,
        offset,
        limit,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get featured user custom searches
   * @param {'HOME' | 'EDITOR_BOARD'} [type] Number of records to return
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersearchesApi
   */
  public getFeaturedUserCustomSearches(
    type?: "HOME" | "EDITOR_BOARD",
    options?: AxiosRequestConfig
  ) {
    return UsersearchesApiFp(this.configuration)
      .getFeaturedUserCustomSearches(type, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get custom search
   * @param {number} searchIdentifier User search identifier
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersearchesApi
   */
  public getUserCustomSearch(
    searchIdentifier: number,
    options?: AxiosRequestConfig
  ) {
    return UsersearchesApiFp(this.configuration)
      .getUserCustomSearch(searchIdentifier, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get user custom searches
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersearchesApi
   */
  public getUserCustomSearches(options?: AxiosRequestConfig) {
    return UsersearchesApiFp(this.configuration)
      .getUserCustomSearches(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a user search
   * @param {number} searchIdentifier User search identifier
   * @param {UserSearchDto} userSearchDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersearchesApi
   */
  public updateCustomUserSearch(
    searchIdentifier: number,
    userSearchDto: UserSearchDto,
    options?: AxiosRequestConfig
  ) {
    return UsersearchesApiFp(this.configuration)
      .updateCustomUserSearch(searchIdentifier, userSearchDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork 4.0.6 OpenAPI Documentation
 * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.
 *
 * The version of the OpenAPI document: 4.0.6
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
import { Configuration } from "../../../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../../../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../../../base";
// @ts-ignore
import { RatingAverage } from "../../..//geonetwork-openapi/model";
// @ts-ignore
import { RatingCriteria } from "../../..//geonetwork-openapi/model";
// @ts-ignore
import { UserFeedbackDTO } from "../../..//geonetwork-openapi/model";
/**
 * UserfeedbackApi - axios parameter creator
 * @export
 */
export const UserfeedbackApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Removes a user feedback
     * @summary Removes a user feedback
     * @param {string} uuid User feedback UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserFeedback: async (
      uuid: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'uuid' is not null or undefined
      assertParamExists("deleteUserFeedback", "uuid", uuid);
      const localVarPath = `/userfeedback/{uuid}`.replace(
        `{${"uuid"}}`,
        encodeURIComponent(String(uuid))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Provides an average rating for a metadata record
     * @param {string} metadataUuid Metadata record UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMetadataRating: async (
      metadataUuid: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'metadataUuid' is not null or undefined
      assertParamExists("getMetadataRating", "metadataUuid", metadataUuid);
      const localVarPath = `/records/{metadataUuid}/userfeedbackrating`.replace(
        `{${"metadataUuid"}}`,
        encodeURIComponent(String(metadataUuid))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get list of rating criteria
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRatingCriteria: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/userfeedback/ratingcriteria`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Finds a specific user feedback
     * @param {string} uuid User feedback UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserComment: async (
      uuid: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'uuid' is not null or undefined
      assertParamExists("getUserComment", "uuid", uuid);
      const localVarPath = `/userfeedback/{uuid}`.replace(
        `{${"uuid"}}`,
        encodeURIComponent(String(uuid))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *  This list will include also the draft user feedback if the client is logged as reviewer.
     * @summary Finds a list of user feedback records.
     * @param {string} [metadataUuid] Metadata record UUID.
     * @param {number} [size] Maximum number of feedback to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserComments: async (
      metadataUuid?: string,
      size?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/userfeedback`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (metadataUuid !== undefined) {
        localVarQueryParameter["metadataUuid"] = metadataUuid;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *  This list will include also the draft user feedback if the client is logged as reviewer.
     * @summary Finds a list of user feedback for a specific records.
     * @param {string} metadataUuid Metadata record UUID.
     * @param {number} [size] Maximum number of feedback to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserCommentsOnARecord: async (
      metadataUuid: string,
      size?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'metadataUuid' is not null or undefined
      assertParamExists(
        "getUserCommentsOnARecord",
        "metadataUuid",
        metadataUuid
      );
      const localVarPath = `/records/{metadataUuid}/userfeedback`.replace(
        `{${"metadataUuid"}}`,
        encodeURIComponent(String(metadataUuid))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Creates a user feedback in draft status if the user is not logged in.
     * @summary Creates a user feedback
     * @param {UserFeedbackDTO} userFeedbackDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    newUserFeedback: async (
      userFeedbackDTO: UserFeedbackDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userFeedbackDTO' is not null or undefined
      assertParamExists("newUserFeedback", "userFeedbackDTO", userFeedbackDTO);
      const localVarPath = `/userfeedback`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userFeedbackDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * For reviewers
     * @summary Publishes a feedback
     * @param {string} uuid User feedback UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publishFeedback: async (
      uuid: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'uuid' is not null or undefined
      assertParamExists("publishFeedback", "uuid", uuid);
      const localVarPath = `/userfeedback/{uuid}/publish`.replace(
        `{${"uuid"}}`,
        encodeURIComponent(String(uuid))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Send an email to catalogue administrator or record\'s contact
     * @param {string} metadataUuid Metadata record UUID.
     * @param {string} name User name.
     * @param {string} org User organisation.
     * @param {string} email User email address.
     * @param {string} comments A comment or question.
     * @param {string} [recaptcha] Recaptcha validation key.
     * @param {string} [phone] User phone number.
     * @param {string} [subject] Email subject.
     * @param {string} [_function] User function.
     * @param {string} [type] Comment type.
     * @param {string} [category] Comment category.
     * @param {string} [metadataEmail] List of record\&#39;s contact to send this email.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendEmailToContact: async (
      metadataUuid: string,
      name: string,
      org: string,
      email: string,
      comments: string,
      recaptcha?: string,
      phone?: string,
      subject?: string,
      _function?: string,
      type?: string,
      category?: string,
      metadataEmail?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'metadataUuid' is not null or undefined
      assertParamExists("sendEmailToContact", "metadataUuid", metadataUuid);
      // verify required parameter 'name' is not null or undefined
      assertParamExists("sendEmailToContact", "name", name);
      // verify required parameter 'org' is not null or undefined
      assertParamExists("sendEmailToContact", "org", org);
      // verify required parameter 'email' is not null or undefined
      assertParamExists("sendEmailToContact", "email", email);
      // verify required parameter 'comments' is not null or undefined
      assertParamExists("sendEmailToContact", "comments", comments);
      const localVarPath = `/records/{metadataUuid}/alert`.replace(
        `{${"metadataUuid"}}`,
        encodeURIComponent(String(metadataUuid))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (recaptcha !== undefined) {
        localVarQueryParameter["recaptcha"] = recaptcha;
      }

      if (name !== undefined) {
        localVarQueryParameter["name"] = name;
      }

      if (org !== undefined) {
        localVarQueryParameter["org"] = org;
      }

      if (email !== undefined) {
        localVarQueryParameter["email"] = email;
      }

      if (comments !== undefined) {
        localVarQueryParameter["comments"] = comments;
      }

      if (phone !== undefined) {
        localVarQueryParameter["phone"] = phone;
      }

      if (subject !== undefined) {
        localVarQueryParameter["subject"] = subject;
      }

      if (_function !== undefined) {
        localVarQueryParameter["function"] = _function;
      }

      if (type !== undefined) {
        localVarQueryParameter["type"] = type;
      }

      if (category !== undefined) {
        localVarQueryParameter["category"] = category;
      }

      if (metadataEmail !== undefined) {
        localVarQueryParameter["metadataEmail"] = metadataEmail;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UserfeedbackApi - functional programming interface
 * @export
 */
export const UserfeedbackApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    UserfeedbackApiAxiosParamCreator(configuration);
  return {
    /**
     * Removes a user feedback
     * @summary Removes a user feedback
     * @param {string} uuid User feedback UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteUserFeedback(
      uuid: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteUserFeedback(uuid, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Provides an average rating for a metadata record
     * @param {string} metadataUuid Metadata record UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMetadataRating(
      metadataUuid: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RatingAverage>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getMetadataRating(
          metadataUuid,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get list of rating criteria
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getRatingCriteria(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<RatingCriteria>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getRatingCriteria(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Finds a specific user feedback
     * @param {string} uuid User feedback UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserComment(
      uuid: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UserFeedbackDTO>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUserComment(
        uuid,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *  This list will include also the draft user feedback if the client is logged as reviewer.
     * @summary Finds a list of user feedback records.
     * @param {string} [metadataUuid] Metadata record UUID.
     * @param {number} [size] Maximum number of feedback to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserComments(
      metadataUuid?: string,
      size?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<UserFeedbackDTO>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUserComments(
        metadataUuid,
        size,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *  This list will include also the draft user feedback if the client is logged as reviewer.
     * @summary Finds a list of user feedback for a specific records.
     * @param {string} metadataUuid Metadata record UUID.
     * @param {number} [size] Maximum number of feedback to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserCommentsOnARecord(
      metadataUuid: string,
      size?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<UserFeedbackDTO>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getUserCommentsOnARecord(
          metadataUuid,
          size,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Creates a user feedback in draft status if the user is not logged in.
     * @summary Creates a user feedback
     * @param {UserFeedbackDTO} userFeedbackDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async newUserFeedback(
      userFeedbackDTO: UserFeedbackDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.newUserFeedback(
        userFeedbackDTO,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * For reviewers
     * @summary Publishes a feedback
     * @param {string} uuid User feedback UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async publishFeedback(
      uuid: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.publishFeedback(
        uuid,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Send an email to catalogue administrator or record\'s contact
     * @param {string} metadataUuid Metadata record UUID.
     * @param {string} name User name.
     * @param {string} org User organisation.
     * @param {string} email User email address.
     * @param {string} comments A comment or question.
     * @param {string} [recaptcha] Recaptcha validation key.
     * @param {string} [phone] User phone number.
     * @param {string} [subject] Email subject.
     * @param {string} [_function] User function.
     * @param {string} [type] Comment type.
     * @param {string} [category] Comment category.
     * @param {string} [metadataEmail] List of record\&#39;s contact to send this email.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sendEmailToContact(
      metadataUuid: string,
      name: string,
      org: string,
      email: string,
      comments: string,
      recaptcha?: string,
      phone?: string,
      subject?: string,
      _function?: string,
      type?: string,
      category?: string,
      metadataEmail?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.sendEmailToContact(
          metadataUuid,
          name,
          org,
          email,
          comments,
          recaptcha,
          phone,
          subject,
          _function,
          type,
          category,
          metadataEmail,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * UserfeedbackApi - factory interface
 * @export
 */
export const UserfeedbackApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UserfeedbackApiFp(configuration);
  return {
    /**
     * Removes a user feedback
     * @summary Removes a user feedback
     * @param {string} uuid User feedback UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserFeedback(uuid: string, options?: any): AxiosPromise<string> {
      return localVarFp
        .deleteUserFeedback(uuid, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Provides an average rating for a metadata record
     * @param {string} metadataUuid Metadata record UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMetadataRating(
      metadataUuid: string,
      options?: any
    ): AxiosPromise<RatingAverage> {
      return localVarFp
        .getMetadataRating(metadataUuid, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get list of rating criteria
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRatingCriteria(options?: any): AxiosPromise<Array<RatingCriteria>> {
      return localVarFp
        .getRatingCriteria(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Finds a specific user feedback
     * @param {string} uuid User feedback UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserComment(uuid: string, options?: any): AxiosPromise<UserFeedbackDTO> {
      return localVarFp
        .getUserComment(uuid, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *  This list will include also the draft user feedback if the client is logged as reviewer.
     * @summary Finds a list of user feedback records.
     * @param {string} [metadataUuid] Metadata record UUID.
     * @param {number} [size] Maximum number of feedback to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserComments(
      metadataUuid?: string,
      size?: number,
      options?: any
    ): AxiosPromise<Array<UserFeedbackDTO>> {
      return localVarFp
        .getUserComments(metadataUuid, size, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *  This list will include also the draft user feedback if the client is logged as reviewer.
     * @summary Finds a list of user feedback for a specific records.
     * @param {string} metadataUuid Metadata record UUID.
     * @param {number} [size] Maximum number of feedback to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserCommentsOnARecord(
      metadataUuid: string,
      size?: number,
      options?: any
    ): AxiosPromise<Array<UserFeedbackDTO>> {
      return localVarFp
        .getUserCommentsOnARecord(metadataUuid, size, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Creates a user feedback in draft status if the user is not logged in.
     * @summary Creates a user feedback
     * @param {UserFeedbackDTO} userFeedbackDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    newUserFeedback(
      userFeedbackDTO: UserFeedbackDTO,
      options?: any
    ): AxiosPromise<string> {
      return localVarFp
        .newUserFeedback(userFeedbackDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * For reviewers
     * @summary Publishes a feedback
     * @param {string} uuid User feedback UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publishFeedback(uuid: string, options?: any): AxiosPromise<string> {
      return localVarFp
        .publishFeedback(uuid, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Send an email to catalogue administrator or record\'s contact
     * @param {string} metadataUuid Metadata record UUID.
     * @param {string} name User name.
     * @param {string} org User organisation.
     * @param {string} email User email address.
     * @param {string} comments A comment or question.
     * @param {string} [recaptcha] Recaptcha validation key.
     * @param {string} [phone] User phone number.
     * @param {string} [subject] Email subject.
     * @param {string} [_function] User function.
     * @param {string} [type] Comment type.
     * @param {string} [category] Comment category.
     * @param {string} [metadataEmail] List of record\&#39;s contact to send this email.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendEmailToContact(
      metadataUuid: string,
      name: string,
      org: string,
      email: string,
      comments: string,
      recaptcha?: string,
      phone?: string,
      subject?: string,
      _function?: string,
      type?: string,
      category?: string,
      metadataEmail?: string,
      options?: any
    ): AxiosPromise<string> {
      return localVarFp
        .sendEmailToContact(
          metadataUuid,
          name,
          org,
          email,
          comments,
          recaptcha,
          phone,
          subject,
          _function,
          type,
          category,
          metadataEmail,
          options
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UserfeedbackApi - object-oriented interface
 * @export
 * @class UserfeedbackApi
 * @extends {BaseAPI}
 */
export class UserfeedbackApi extends BaseAPI {
  /**
   * Removes a user feedback
   * @summary Removes a user feedback
   * @param {string} uuid User feedback UUID.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserfeedbackApi
   */
  public deleteUserFeedback(uuid: string, options?: AxiosRequestConfig) {
    return UserfeedbackApiFp(this.configuration)
      .deleteUserFeedback(uuid, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Provides an average rating for a metadata record
   * @param {string} metadataUuid Metadata record UUID.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserfeedbackApi
   */
  public getMetadataRating(metadataUuid: string, options?: AxiosRequestConfig) {
    return UserfeedbackApiFp(this.configuration)
      .getMetadataRating(metadataUuid, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get list of rating criteria
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserfeedbackApi
   */
  public getRatingCriteria(options?: AxiosRequestConfig) {
    return UserfeedbackApiFp(this.configuration)
      .getRatingCriteria(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Finds a specific user feedback
   * @param {string} uuid User feedback UUID.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserfeedbackApi
   */
  public getUserComment(uuid: string, options?: AxiosRequestConfig) {
    return UserfeedbackApiFp(this.configuration)
      .getUserComment(uuid, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *  This list will include also the draft user feedback if the client is logged as reviewer.
   * @summary Finds a list of user feedback records.
   * @param {string} [metadataUuid] Metadata record UUID.
   * @param {number} [size] Maximum number of feedback to return.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserfeedbackApi
   */
  public getUserComments(
    metadataUuid?: string,
    size?: number,
    options?: AxiosRequestConfig
  ) {
    return UserfeedbackApiFp(this.configuration)
      .getUserComments(metadataUuid, size, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *  This list will include also the draft user feedback if the client is logged as reviewer.
   * @summary Finds a list of user feedback for a specific records.
   * @param {string} metadataUuid Metadata record UUID.
   * @param {number} [size] Maximum number of feedback to return.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserfeedbackApi
   */
  public getUserCommentsOnARecord(
    metadataUuid: string,
    size?: number,
    options?: AxiosRequestConfig
  ) {
    return UserfeedbackApiFp(this.configuration)
      .getUserCommentsOnARecord(metadataUuid, size, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Creates a user feedback in draft status if the user is not logged in.
   * @summary Creates a user feedback
   * @param {UserFeedbackDTO} userFeedbackDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserfeedbackApi
   */
  public newUserFeedback(
    userFeedbackDTO: UserFeedbackDTO,
    options?: AxiosRequestConfig
  ) {
    return UserfeedbackApiFp(this.configuration)
      .newUserFeedback(userFeedbackDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * For reviewers
   * @summary Publishes a feedback
   * @param {string} uuid User feedback UUID.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserfeedbackApi
   */
  public publishFeedback(uuid: string, options?: AxiosRequestConfig) {
    return UserfeedbackApiFp(this.configuration)
      .publishFeedback(uuid, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Send an email to catalogue administrator or record\'s contact
   * @param {string} metadataUuid Metadata record UUID.
   * @param {string} name User name.
   * @param {string} org User organisation.
   * @param {string} email User email address.
   * @param {string} comments A comment or question.
   * @param {string} [recaptcha] Recaptcha validation key.
   * @param {string} [phone] User phone number.
   * @param {string} [subject] Email subject.
   * @param {string} [_function] User function.
   * @param {string} [type] Comment type.
   * @param {string} [category] Comment category.
   * @param {string} [metadataEmail] List of record\&#39;s contact to send this email.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserfeedbackApi
   */
  public sendEmailToContact(
    metadataUuid: string,
    name: string,
    org: string,
    email: string,
    comments: string,
    recaptcha?: string,
    phone?: string,
    subject?: string,
    _function?: string,
    type?: string,
    category?: string,
    metadataEmail?: string,
    options?: AxiosRequestConfig
  ) {
    return UserfeedbackApiFp(this.configuration)
      .sendEmailToContact(
        metadataUuid,
        name,
        org,
        email,
        comments,
        recaptcha,
        phone,
        subject,
        _function,
        type,
        category,
        metadataEmail,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}

/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork 4.0.6 OpenAPI Documentation
 * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.
 *
 * The version of the OpenAPI document: 4.0.6
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
import { Configuration } from "../../../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../../../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../../../base";
// @ts-ignore
import { Source } from "../../..//geonetwork-openapi/model";
/**
 * SourcesApi - axios parameter creator
 * @export
 */
export const SourcesApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Add a source
     * @param {Source} source
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addSource: async (
      source: Source,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'source' is not null or undefined
      assertParamExists("addSource", "source", source);
      const localVarPath = `/sources`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        source,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove a source
     * @param {string} sourceIdentifier Source identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSource: async (
      sourceIdentifier: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'sourceIdentifier' is not null or undefined
      assertParamExists("deleteSource", "sourceIdentifier", sourceIdentifier);
      const localVarPath = `/sources/{sourceIdentifier}`.replace(
        `{${"sourceIdentifier"}}`,
        encodeURIComponent(String(sourceIdentifier))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Sources are the local catalogue, subportal, external catalogue (when importing MEF files) or harvesters.
     * @summary Get all sources by type
     * @param {'portal' | 'subportal' | 'externalportal' | 'harvester'} type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSourcesByType: async (
      type: "portal" | "subportal" | "externalportal" | "harvester",
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'type' is not null or undefined
      assertParamExists("getSourcesByType", "type", type);
      const localVarPath = `/sources/{type}`.replace(
        `{${"type"}}`,
        encodeURIComponent(String(type))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Sources are the local catalogue, subportal, external catalogue (when importing MEF files) or harvesters.
     * @summary Get all sources
     * @param {number} [group] Group owner of the source (only applies to subportal).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubPortals1: async (
      group?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/sources`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (group !== undefined) {
        localVarQueryParameter["group"] = group;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a source
     * @param {string} sourceIdentifier Source identifier
     * @param {Source} source
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSource: async (
      sourceIdentifier: string,
      source: Source,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'sourceIdentifier' is not null or undefined
      assertParamExists("updateSource", "sourceIdentifier", sourceIdentifier);
      // verify required parameter 'source' is not null or undefined
      assertParamExists("updateSource", "source", source);
      const localVarPath = `/sources/{sourceIdentifier}`.replace(
        `{${"sourceIdentifier"}}`,
        encodeURIComponent(String(sourceIdentifier))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        source,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SourcesApi - functional programming interface
 * @export
 */
export const SourcesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = SourcesApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Add a source
     * @param {Source} source
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addSource(
      source: Source,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addSource(
        source,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Remove a source
     * @param {string} sourceIdentifier Source identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteSource(
      sourceIdentifier: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSource(
        sourceIdentifier,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Sources are the local catalogue, subportal, external catalogue (when importing MEF files) or harvesters.
     * @summary Get all sources by type
     * @param {'portal' | 'subportal' | 'externalportal' | 'harvester'} type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSourcesByType(
      type: "portal" | "subportal" | "externalportal" | "harvester",
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Source>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getSourcesByType(type, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Sources are the local catalogue, subportal, external catalogue (when importing MEF files) or harvesters.
     * @summary Get all sources
     * @param {number} [group] Group owner of the source (only applies to subportal).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSubPortals1(
      group?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Source>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getSubPortals1(
        group,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update a source
     * @param {string} sourceIdentifier Source identifier
     * @param {Source} source
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateSource(
      sourceIdentifier: string,
      source: Source,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateSource(
        sourceIdentifier,
        source,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * SourcesApi - factory interface
 * @export
 */
export const SourcesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = SourcesApiFp(configuration);
  return {
    /**
     *
     * @summary Add a source
     * @param {Source} source
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addSource(source: Source, options?: any): AxiosPromise<string> {
      return localVarFp
        .addSource(source, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove a source
     * @param {string} sourceIdentifier Source identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSource(
      sourceIdentifier: string,
      options?: any
    ): AxiosPromise<string> {
      return localVarFp
        .deleteSource(sourceIdentifier, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Sources are the local catalogue, subportal, external catalogue (when importing MEF files) or harvesters.
     * @summary Get all sources by type
     * @param {'portal' | 'subportal' | 'externalportal' | 'harvester'} type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSourcesByType(
      type: "portal" | "subportal" | "externalportal" | "harvester",
      options?: any
    ): AxiosPromise<Array<Source>> {
      return localVarFp
        .getSourcesByType(type, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Sources are the local catalogue, subportal, external catalogue (when importing MEF files) or harvesters.
     * @summary Get all sources
     * @param {number} [group] Group owner of the source (only applies to subportal).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubPortals1(group?: number, options?: any): AxiosPromise<Array<Source>> {
      return localVarFp
        .getSubPortals1(group, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a source
     * @param {string} sourceIdentifier Source identifier
     * @param {Source} source
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSource(
      sourceIdentifier: string,
      source: Source,
      options?: any
    ): AxiosPromise<string> {
      return localVarFp
        .updateSource(sourceIdentifier, source, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * SourcesApi - object-oriented interface
 * @export
 * @class SourcesApi
 * @extends {BaseAPI}
 */
export class SourcesApi extends BaseAPI {
  /**
   *
   * @summary Add a source
   * @param {Source} source
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SourcesApi
   */
  public addSource(source: Source, options?: AxiosRequestConfig) {
    return SourcesApiFp(this.configuration)
      .addSource(source, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Remove a source
   * @param {string} sourceIdentifier Source identifier
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SourcesApi
   */
  public deleteSource(sourceIdentifier: string, options?: AxiosRequestConfig) {
    return SourcesApiFp(this.configuration)
      .deleteSource(sourceIdentifier, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Sources are the local catalogue, subportal, external catalogue (when importing MEF files) or harvesters.
   * @summary Get all sources by type
   * @param {'portal' | 'subportal' | 'externalportal' | 'harvester'} type
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SourcesApi
   */
  public getSourcesByType(
    type: "portal" | "subportal" | "externalportal" | "harvester",
    options?: AxiosRequestConfig
  ) {
    return SourcesApiFp(this.configuration)
      .getSourcesByType(type, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Sources are the local catalogue, subportal, external catalogue (when importing MEF files) or harvesters.
   * @summary Get all sources
   * @param {number} [group] Group owner of the source (only applies to subportal).
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SourcesApi
   */
  public getSubPortals1(group?: number, options?: AxiosRequestConfig) {
    return SourcesApiFp(this.configuration)
      .getSubPortals1(group, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a source
   * @param {string} sourceIdentifier Source identifier
   * @param {Source} source
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SourcesApi
   */
  public updateSource(
    sourceIdentifier: string,
    source: Source,
    options?: AxiosRequestConfig
  ) {
    return SourcesApiFp(this.configuration)
      .updateSource(sourceIdentifier, source, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork 4.0.6 OpenAPI Documentation
 * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.
 *
 * The version of the OpenAPI document: 4.0.6
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
import { Configuration } from "../../../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../../../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../../../base";
// @ts-ignore
import { Selection } from "../../..//geonetwork-openapi/model";
/**
 * UserselectionsApi - axios parameter creator
 * @export
 */
export const UserselectionsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Add items to a user selection set
     * @param {number} selectionIdentifier Selection identifier
     * @param {number} userIdentifier User identifier
     * @param {Array<string>} [uuid] One or more record UUIDs.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addToUserSelection: async (
      selectionIdentifier: number,
      userIdentifier: number,
      uuid?: Array<string>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'selectionIdentifier' is not null or undefined
      assertParamExists(
        "addToUserSelection",
        "selectionIdentifier",
        selectionIdentifier
      );
      // verify required parameter 'userIdentifier' is not null or undefined
      assertParamExists("addToUserSelection", "userIdentifier", userIdentifier);
      const localVarPath =
        `/userselections/{selectionIdentifier}/{userIdentifier}`
          .replace(
            `{${"selectionIdentifier"}}`,
            encodeURIComponent(String(selectionIdentifier))
          )
          .replace(
            `{${"userIdentifier"}}`,
            encodeURIComponent(String(userIdentifier))
          );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (uuid) {
        localVarQueryParameter["uuid"] = uuid;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add a user selection set
     * @param {Selection} selection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPersistentSelectionType: async (
      selection: Selection,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'selection' is not null or undefined
      assertParamExists(
        "createPersistentSelectionType",
        "selection",
        selection
      );
      const localVarPath = `/userselections`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        selection,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove items to a user selection set
     * @param {number} selectionIdentifier Selection identifier
     * @param {number} userIdentifier User identifier
     * @param {Array<string>} [uuid] One or more record UUIDs. If null, remove all.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFromUserSelection: async (
      selectionIdentifier: number,
      userIdentifier: number,
      uuid?: Array<string>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'selectionIdentifier' is not null or undefined
      assertParamExists(
        "deleteFromUserSelection",
        "selectionIdentifier",
        selectionIdentifier
      );
      // verify required parameter 'userIdentifier' is not null or undefined
      assertParamExists(
        "deleteFromUserSelection",
        "userIdentifier",
        userIdentifier
      );
      const localVarPath =
        `/userselections/{selectionIdentifier}/{userIdentifier}`
          .replace(
            `{${"selectionIdentifier"}}`,
            encodeURIComponent(String(selectionIdentifier))
          )
          .replace(
            `{${"userIdentifier"}}`,
            encodeURIComponent(String(userIdentifier))
          );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (uuid) {
        localVarQueryParameter["uuid"] = uuid;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove a user selection set
     * @param {number} selectionIdentifier Selection identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserSelection: async (
      selectionIdentifier: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'selectionIdentifier' is not null or undefined
      assertParamExists(
        "deleteUserSelection",
        "selectionIdentifier",
        selectionIdentifier
      );
      const localVarPath = `/userselections/{selectionIdentifier}`.replace(
        `{${"selectionIdentifier"}}`,
        encodeURIComponent(String(selectionIdentifier))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get list of user selection sets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelectionList: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/userselections`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get record in a user selection set
     * @param {number} selectionIdentifier Selection identifier
     * @param {number} userIdentifier User identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelectionRecords: async (
      selectionIdentifier: number,
      userIdentifier: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'selectionIdentifier' is not null or undefined
      assertParamExists(
        "getSelectionRecords",
        "selectionIdentifier",
        selectionIdentifier
      );
      // verify required parameter 'userIdentifier' is not null or undefined
      assertParamExists(
        "getSelectionRecords",
        "userIdentifier",
        userIdentifier
      );
      const localVarPath =
        `/userselections/{selectionIdentifier}/{userIdentifier}`
          .replace(
            `{${"selectionIdentifier"}}`,
            encodeURIComponent(String(selectionIdentifier))
          )
          .replace(
            `{${"userIdentifier"}}`,
            encodeURIComponent(String(userIdentifier))
          );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a user selection set
     * @param {number} selectionIdentifier Selection identifier
     * @param {Selection} selection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserSelection: async (
      selectionIdentifier: number,
      selection: Selection,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'selectionIdentifier' is not null or undefined
      assertParamExists(
        "updateUserSelection",
        "selectionIdentifier",
        selectionIdentifier
      );
      // verify required parameter 'selection' is not null or undefined
      assertParamExists("updateUserSelection", "selection", selection);
      const localVarPath = `/userselections/{selectionIdentifier}`.replace(
        `{${"selectionIdentifier"}}`,
        encodeURIComponent(String(selectionIdentifier))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        selection,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UserselectionsApi - functional programming interface
 * @export
 */
export const UserselectionsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    UserselectionsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Add items to a user selection set
     * @param {number} selectionIdentifier Selection identifier
     * @param {number} userIdentifier User identifier
     * @param {Array<string>} [uuid] One or more record UUIDs.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addToUserSelection(
      selectionIdentifier: number,
      userIdentifier: number,
      uuid?: Array<string>,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.addToUserSelection(
          selectionIdentifier,
          userIdentifier,
          uuid,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Add a user selection set
     * @param {Selection} selection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createPersistentSelectionType(
      selection: Selection,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createPersistentSelectionType(
          selection,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Remove items to a user selection set
     * @param {number} selectionIdentifier Selection identifier
     * @param {number} userIdentifier User identifier
     * @param {Array<string>} [uuid] One or more record UUIDs. If null, remove all.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteFromUserSelection(
      selectionIdentifier: number,
      userIdentifier: number,
      uuid?: Array<string>,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteFromUserSelection(
          selectionIdentifier,
          userIdentifier,
          uuid,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Remove a user selection set
     * @param {number} selectionIdentifier Selection identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteUserSelection(
      selectionIdentifier: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteUserSelection(
          selectionIdentifier,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get list of user selection sets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSelectionList(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<Selection>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getSelectionList(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get record in a user selection set
     * @param {number} selectionIdentifier Selection identifier
     * @param {number} userIdentifier User identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSelectionRecords(
      selectionIdentifier: number,
      userIdentifier: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getSelectionRecords(
          selectionIdentifier,
          userIdentifier,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update a user selection set
     * @param {number} selectionIdentifier Selection identifier
     * @param {Selection} selection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateUserSelection(
      selectionIdentifier: number,
      selection: Selection,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateUserSelection(
          selectionIdentifier,
          selection,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * UserselectionsApi - factory interface
 * @export
 */
export const UserselectionsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UserselectionsApiFp(configuration);
  return {
    /**
     *
     * @summary Add items to a user selection set
     * @param {number} selectionIdentifier Selection identifier
     * @param {number} userIdentifier User identifier
     * @param {Array<string>} [uuid] One or more record UUIDs.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addToUserSelection(
      selectionIdentifier: number,
      userIdentifier: number,
      uuid?: Array<string>,
      options?: any
    ): AxiosPromise<string> {
      return localVarFp
        .addToUserSelection(selectionIdentifier, userIdentifier, uuid, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add a user selection set
     * @param {Selection} selection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPersistentSelectionType(
      selection: Selection,
      options?: any
    ): AxiosPromise<string> {
      return localVarFp
        .createPersistentSelectionType(selection, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove items to a user selection set
     * @param {number} selectionIdentifier Selection identifier
     * @param {number} userIdentifier User identifier
     * @param {Array<string>} [uuid] One or more record UUIDs. If null, remove all.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFromUserSelection(
      selectionIdentifier: number,
      userIdentifier: number,
      uuid?: Array<string>,
      options?: any
    ): AxiosPromise<string> {
      return localVarFp
        .deleteFromUserSelection(
          selectionIdentifier,
          userIdentifier,
          uuid,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove a user selection set
     * @param {number} selectionIdentifier Selection identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserSelection(
      selectionIdentifier: number,
      options?: any
    ): AxiosPromise<string> {
      return localVarFp
        .deleteUserSelection(selectionIdentifier, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get list of user selection sets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelectionList(options?: any): AxiosPromise<Array<Selection>> {
      return localVarFp
        .getSelectionList(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get record in a user selection set
     * @param {number} selectionIdentifier Selection identifier
     * @param {number} userIdentifier User identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelectionRecords(
      selectionIdentifier: number,
      userIdentifier: number,
      options?: any
    ): AxiosPromise<Array<string>> {
      return localVarFp
        .getSelectionRecords(selectionIdentifier, userIdentifier, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a user selection set
     * @param {number} selectionIdentifier Selection identifier
     * @param {Selection} selection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserSelection(
      selectionIdentifier: number,
      selection: Selection,
      options?: any
    ): AxiosPromise<string> {
      return localVarFp
        .updateUserSelection(selectionIdentifier, selection, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UserselectionsApi - object-oriented interface
 * @export
 * @class UserselectionsApi
 * @extends {BaseAPI}
 */
export class UserselectionsApi extends BaseAPI {
  /**
   *
   * @summary Add items to a user selection set
   * @param {number} selectionIdentifier Selection identifier
   * @param {number} userIdentifier User identifier
   * @param {Array<string>} [uuid] One or more record UUIDs.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserselectionsApi
   */
  public addToUserSelection(
    selectionIdentifier: number,
    userIdentifier: number,
    uuid?: Array<string>,
    options?: AxiosRequestConfig
  ) {
    return UserselectionsApiFp(this.configuration)
      .addToUserSelection(selectionIdentifier, userIdentifier, uuid, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Add a user selection set
   * @param {Selection} selection
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserselectionsApi
   */
  public createPersistentSelectionType(
    selection: Selection,
    options?: AxiosRequestConfig
  ) {
    return UserselectionsApiFp(this.configuration)
      .createPersistentSelectionType(selection, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Remove items to a user selection set
   * @param {number} selectionIdentifier Selection identifier
   * @param {number} userIdentifier User identifier
   * @param {Array<string>} [uuid] One or more record UUIDs. If null, remove all.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserselectionsApi
   */
  public deleteFromUserSelection(
    selectionIdentifier: number,
    userIdentifier: number,
    uuid?: Array<string>,
    options?: AxiosRequestConfig
  ) {
    return UserselectionsApiFp(this.configuration)
      .deleteFromUserSelection(
        selectionIdentifier,
        userIdentifier,
        uuid,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Remove a user selection set
   * @param {number} selectionIdentifier Selection identifier
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserselectionsApi
   */
  public deleteUserSelection(
    selectionIdentifier: number,
    options?: AxiosRequestConfig
  ) {
    return UserselectionsApiFp(this.configuration)
      .deleteUserSelection(selectionIdentifier, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get list of user selection sets
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserselectionsApi
   */
  public getSelectionList(options?: AxiosRequestConfig) {
    return UserselectionsApiFp(this.configuration)
      .getSelectionList(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get record in a user selection set
   * @param {number} selectionIdentifier Selection identifier
   * @param {number} userIdentifier User identifier
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserselectionsApi
   */
  public getSelectionRecords(
    selectionIdentifier: number,
    userIdentifier: number,
    options?: AxiosRequestConfig
  ) {
    return UserselectionsApiFp(this.configuration)
      .getSelectionRecords(selectionIdentifier, userIdentifier, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a user selection set
   * @param {number} selectionIdentifier Selection identifier
   * @param {Selection} selection
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserselectionsApi
   */
  public updateUserSelection(
    selectionIdentifier: number,
    selection: Selection,
    options?: AxiosRequestConfig
  ) {
    return UserselectionsApiFp(this.configuration)
      .updateUserSelection(selectionIdentifier, selection, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

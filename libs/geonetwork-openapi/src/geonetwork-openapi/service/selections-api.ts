/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork 4.0.6 OpenAPI Documentation
 * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.
 *
 * The version of the OpenAPI document: 4.0.6
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
import { Configuration } from "../../../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../../../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../../../base";
/**
 * SelectionsApi - axios parameter creator
 * @export
 */
export const SelectionsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Select one or more items
     * @param {string} bucket Bucket name
     * @param {Array<string>} [uuid] One or more record UUIDs. If null, select all in current search if bucket name is \&#39;metadata\&#39; (TODO: remove this limitation?).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    add: async (
      bucket: string,
      uuid?: Array<string>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'bucket' is not null or undefined
      assertParamExists("add", "bucket", bucket);
      const localVarPath = `/selections/{bucket}`.replace(
        `{${"bucket"}}`,
        encodeURIComponent(String(bucket))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (uuid) {
        localVarQueryParameter["uuid"] = uuid;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Clear selection or remove items
     * @param {string} bucket Selection bucket name
     * @param {Array<string>} [uuid] One or more record UUIDs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clear: async (
      bucket: string,
      uuid?: Array<string>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'bucket' is not null or undefined
      assertParamExists("clear", "bucket", bucket);
      const localVarPath = `/selections/{bucket}`.replace(
        `{${"bucket"}}`,
        encodeURIComponent(String(bucket))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (uuid) {
        localVarQueryParameter["uuid"] = uuid;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get current selection
     * @param {string} bucket Bucket name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get: async (
      bucket: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'bucket' is not null or undefined
      assertParamExists("get", "bucket", bucket);
      const localVarPath = `/selections/{bucket}`.replace(
        `{${"bucket"}}`,
        encodeURIComponent(String(bucket))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SelectionsApi - functional programming interface
 * @export
 */
export const SelectionsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    SelectionsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Select one or more items
     * @param {string} bucket Bucket name
     * @param {Array<string>} [uuid] One or more record UUIDs. If null, select all in current search if bucket name is \&#39;metadata\&#39; (TODO: remove this limitation?).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async add(
      bucket: string,
      uuid?: Array<string>,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.add(
        bucket,
        uuid,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Clear selection or remove items
     * @param {string} bucket Selection bucket name
     * @param {Array<string>} [uuid] One or more record UUIDs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async clear(
      bucket: string,
      uuid?: Array<string>,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.clear(
        bucket,
        uuid,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get current selection
     * @param {string} bucket Bucket name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async get(
      bucket: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Set<string>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.get(
        bucket,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * SelectionsApi - factory interface
 * @export
 */
export const SelectionsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = SelectionsApiFp(configuration);
  return {
    /**
     *
     * @summary Select one or more items
     * @param {string} bucket Bucket name
     * @param {Array<string>} [uuid] One or more record UUIDs. If null, select all in current search if bucket name is \&#39;metadata\&#39; (TODO: remove this limitation?).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    add(
      bucket: string,
      uuid?: Array<string>,
      options?: any
    ): AxiosPromise<number> {
      return localVarFp
        .add(bucket, uuid, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Clear selection or remove items
     * @param {string} bucket Selection bucket name
     * @param {Array<string>} [uuid] One or more record UUIDs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clear(
      bucket: string,
      uuid?: Array<string>,
      options?: any
    ): AxiosPromise<number> {
      return localVarFp
        .clear(bucket, uuid, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get current selection
     * @param {string} bucket Bucket name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get(bucket: string, options?: any): AxiosPromise<Set<string>> {
      return localVarFp
        .get(bucket, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * SelectionsApi - object-oriented interface
 * @export
 * @class SelectionsApi
 * @extends {BaseAPI}
 */
export class SelectionsApi extends BaseAPI {
  /**
   *
   * @summary Select one or more items
   * @param {string} bucket Bucket name
   * @param {Array<string>} [uuid] One or more record UUIDs. If null, select all in current search if bucket name is \&#39;metadata\&#39; (TODO: remove this limitation?).
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SelectionsApi
   */
  public add(
    bucket: string,
    uuid?: Array<string>,
    options?: AxiosRequestConfig
  ) {
    return SelectionsApiFp(this.configuration)
      .add(bucket, uuid, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Clear selection or remove items
   * @param {string} bucket Selection bucket name
   * @param {Array<string>} [uuid] One or more record UUIDs
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SelectionsApi
   */
  public clear(
    bucket: string,
    uuid?: Array<string>,
    options?: AxiosRequestConfig
  ) {
    return SelectionsApiFp(this.configuration)
      .clear(bucket, uuid, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get current selection
   * @param {string} bucket Bucket name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SelectionsApi
   */
  public get(bucket: string, options?: AxiosRequestConfig) {
    return SelectionsApiFp(this.configuration)
      .get(bucket, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

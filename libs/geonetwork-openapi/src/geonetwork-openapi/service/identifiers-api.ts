/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork 4.0.6 OpenAPI Documentation
 * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.
 *
 * The version of the OpenAPI document: 4.0.6
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
import { Configuration } from "../../../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../../../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../../../base";
// @ts-ignore
import { MetadataIdentifierTemplate } from "../../..//geonetwork-openapi/model";
/**
 * IdentifiersApi - axios parameter creator
 * @export
 */
export const IdentifiersApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Add an identifier template
     * @param {MetadataIdentifierTemplate} metadataIdentifierTemplate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addIdentifier: async (
      metadataIdentifierTemplate: MetadataIdentifierTemplate,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'metadataIdentifierTemplate' is not null or undefined
      assertParamExists(
        "addIdentifier",
        "metadataIdentifierTemplate",
        metadataIdentifierTemplate
      );
      const localVarPath = `/identifiers`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        metadataIdentifierTemplate,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove an identifier template
     * @param {number} identifier Identifier template identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteIdentifier: async (
      identifier: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'identifier' is not null or undefined
      assertParamExists("deleteIdentifier", "identifier", identifier);
      const localVarPath = `/identifiers/{identifier}`.replace(
        `{${"identifier"}}`,
        encodeURIComponent(String(identifier))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Identifier templates are used to create record UUIDs havind a particular structure. The template will be used when user creates a new record. The template identifier to use is defined in the administration > settings.
     * @summary Get identifier templates
     * @param {boolean} [userDefinedOnly] Only user defined ones
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIdentifiers: async (
      userDefinedOnly?: boolean,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/identifiers`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (userDefinedOnly !== undefined) {
        localVarQueryParameter["userDefinedOnly"] = userDefinedOnly;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update an identifier template
     * @param {number} identifier Identifier template identifier
     * @param {MetadataIdentifierTemplate} metadataIdentifierTemplate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateIdentifier: async (
      identifier: number,
      metadataIdentifierTemplate: MetadataIdentifierTemplate,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'identifier' is not null or undefined
      assertParamExists("updateIdentifier", "identifier", identifier);
      // verify required parameter 'metadataIdentifierTemplate' is not null or undefined
      assertParamExists(
        "updateIdentifier",
        "metadataIdentifierTemplate",
        metadataIdentifierTemplate
      );
      const localVarPath = `/identifiers/{identifier}`.replace(
        `{${"identifier"}}`,
        encodeURIComponent(String(identifier))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        metadataIdentifierTemplate,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * IdentifiersApi - functional programming interface
 * @export
 */
export const IdentifiersApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    IdentifiersApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Add an identifier template
     * @param {MetadataIdentifierTemplate} metadataIdentifierTemplate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addIdentifier(
      metadataIdentifierTemplate: MetadataIdentifierTemplate,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addIdentifier(
        metadataIdentifierTemplate,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Remove an identifier template
     * @param {number} identifier Identifier template identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteIdentifier(
      identifier: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteIdentifier(identifier, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Identifier templates are used to create record UUIDs havind a particular structure. The template will be used when user creates a new record. The template identifier to use is defined in the administration > settings.
     * @summary Get identifier templates
     * @param {boolean} [userDefinedOnly] Only user defined ones
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getIdentifiers(
      userDefinedOnly?: boolean,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<MetadataIdentifierTemplate>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getIdentifiers(
        userDefinedOnly,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update an identifier template
     * @param {number} identifier Identifier template identifier
     * @param {MetadataIdentifierTemplate} metadataIdentifierTemplate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateIdentifier(
      identifier: number,
      metadataIdentifierTemplate: MetadataIdentifierTemplate,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateIdentifier(
          identifier,
          metadataIdentifierTemplate,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * IdentifiersApi - factory interface
 * @export
 */
export const IdentifiersApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = IdentifiersApiFp(configuration);
  return {
    /**
     *
     * @summary Add an identifier template
     * @param {MetadataIdentifierTemplate} metadataIdentifierTemplate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addIdentifier(
      metadataIdentifierTemplate: MetadataIdentifierTemplate,
      options?: any
    ): AxiosPromise<number> {
      return localVarFp
        .addIdentifier(metadataIdentifierTemplate, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove an identifier template
     * @param {number} identifier Identifier template identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteIdentifier(identifier: number, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteIdentifier(identifier, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Identifier templates are used to create record UUIDs havind a particular structure. The template will be used when user creates a new record. The template identifier to use is defined in the administration > settings.
     * @summary Get identifier templates
     * @param {boolean} [userDefinedOnly] Only user defined ones
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIdentifiers(
      userDefinedOnly?: boolean,
      options?: any
    ): AxiosPromise<Array<MetadataIdentifierTemplate>> {
      return localVarFp
        .getIdentifiers(userDefinedOnly, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update an identifier template
     * @param {number} identifier Identifier template identifier
     * @param {MetadataIdentifierTemplate} metadataIdentifierTemplate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateIdentifier(
      identifier: number,
      metadataIdentifierTemplate: MetadataIdentifierTemplate,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .updateIdentifier(identifier, metadataIdentifierTemplate, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * IdentifiersApi - object-oriented interface
 * @export
 * @class IdentifiersApi
 * @extends {BaseAPI}
 */
export class IdentifiersApi extends BaseAPI {
  /**
   *
   * @summary Add an identifier template
   * @param {MetadataIdentifierTemplate} metadataIdentifierTemplate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IdentifiersApi
   */
  public addIdentifier(
    metadataIdentifierTemplate: MetadataIdentifierTemplate,
    options?: AxiosRequestConfig
  ) {
    return IdentifiersApiFp(this.configuration)
      .addIdentifier(metadataIdentifierTemplate, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Remove an identifier template
   * @param {number} identifier Identifier template identifier
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IdentifiersApi
   */
  public deleteIdentifier(identifier: number, options?: AxiosRequestConfig) {
    return IdentifiersApiFp(this.configuration)
      .deleteIdentifier(identifier, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Identifier templates are used to create record UUIDs havind a particular structure. The template will be used when user creates a new record. The template identifier to use is defined in the administration > settings.
   * @summary Get identifier templates
   * @param {boolean} [userDefinedOnly] Only user defined ones
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IdentifiersApi
   */
  public getIdentifiers(
    userDefinedOnly?: boolean,
    options?: AxiosRequestConfig
  ) {
    return IdentifiersApiFp(this.configuration)
      .getIdentifiers(userDefinedOnly, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update an identifier template
   * @param {number} identifier Identifier template identifier
   * @param {MetadataIdentifierTemplate} metadataIdentifierTemplate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IdentifiersApi
   */
  public updateIdentifier(
    identifier: number,
    metadataIdentifierTemplate: MetadataIdentifierTemplate,
    options?: AxiosRequestConfig
  ) {
    return IdentifiersApiFp(this.configuration)
      .updateIdentifier(identifier, metadataIdentifierTemplate, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

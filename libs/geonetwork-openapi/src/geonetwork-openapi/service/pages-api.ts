/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork 4.0.6 OpenAPI Documentation
 * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.
 *
 * The version of the OpenAPI document: 4.0.6
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
import { Configuration } from "../../../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../../../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../../../base";
// @ts-ignore
import { InlineObject } from "../../..//geonetwork-openapi/model";
// @ts-ignore
import { InlineObject1 } from "../../..//geonetwork-openapi/model";
// @ts-ignore
import { PageJSONWrapper } from "../../..//geonetwork-openapi/model";
/**
 * PagesApi - axios parameter creator
 * @export
 */
export const PagesApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * <p>Is not possible to load a link and a file at the same time.</p> <a href=\'http://geonetwork-opensource.org/manuals/4.0.x/eng/users/user-guide/define-static-pages/define-pages.html\'>More info</a>
     * @summary Add a new Page object in DRAFT section in status HIDDEN
     * @param {string} language
     * @param {string} pageId
     * @param {'LINK' | 'HTML' | 'TEXT' | 'MARKDOWN' | 'WIKI'} format
     * @param {string} [link]
     * @param {InlineObject} [inlineObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addPage: async (
      language: string,
      pageId: string,
      format: "LINK" | "HTML" | "TEXT" | "MARKDOWN" | "WIKI",
      link?: string,
      inlineObject?: InlineObject,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'language' is not null or undefined
      assertParamExists("addPage", "language", language);
      // verify required parameter 'pageId' is not null or undefined
      assertParamExists("addPage", "pageId", pageId);
      // verify required parameter 'format' is not null or undefined
      assertParamExists("addPage", "format", format);
      const localVarPath = `/pages/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (language !== undefined) {
        localVarQueryParameter["language"] = language;
      }

      if (pageId !== undefined) {
        localVarQueryParameter["pageId"] = pageId;
      }

      if (link !== undefined) {
        localVarQueryParameter["link"] = link;
      }

      if (format !== undefined) {
        localVarQueryParameter["format"] = format;
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        inlineObject,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * <a href=\'http://geonetwork-opensource.org/manuals/4.0.x/eng/users/user-guide/define-static-pages/define-pages.html\'>More info</a>
     * @summary Adds the page to a section. This means that the link to the page will be shown in the list associated to that section.
     * @param {string} language
     * @param {string} pageId
     * @param {'ALL' | 'TOP' | 'FOOTER' | 'MENU' | 'SUBMENU' | 'CUSTOM_MENU1' | 'CUSTOM_MENU2' | 'CUSTOM_MENU3' | 'DRAFT'} section
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addPageToSection: async (
      language: string,
      pageId: string,
      section:
        | "ALL"
        | "TOP"
        | "FOOTER"
        | "MENU"
        | "SUBMENU"
        | "CUSTOM_MENU1"
        | "CUSTOM_MENU2"
        | "CUSTOM_MENU3"
        | "DRAFT",
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'language' is not null or undefined
      assertParamExists("addPageToSection", "language", language);
      // verify required parameter 'pageId' is not null or undefined
      assertParamExists("addPageToSection", "pageId", pageId);
      // verify required parameter 'section' is not null or undefined
      assertParamExists("addPageToSection", "section", section);
      const localVarPath = `/pages/{language}/{pageId}/{section}`
        .replace(`{${"language"}}`, encodeURIComponent(String(language)))
        .replace(`{${"pageId"}}`, encodeURIComponent(String(pageId)))
        .replace(`{${"section"}}`, encodeURIComponent(String(section)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * <a href=\'http://geonetwork-opensource.org/manuals/4.0.x/eng/users/user-guide/define-static-pages/define-pages.html\'>More info</a>
     * @summary Changes the status of a page.
     * @param {string} language
     * @param {string} pageId
     * @param {'PUBLIC' | 'PUBLIC_ONLY' | 'PRIVATE' | 'HIDDEN'} status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changePageStatus: async (
      language: string,
      pageId: string,
      status: "PUBLIC" | "PUBLIC_ONLY" | "PRIVATE" | "HIDDEN",
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'language' is not null or undefined
      assertParamExists("changePageStatus", "language", language);
      // verify required parameter 'pageId' is not null or undefined
      assertParamExists("changePageStatus", "pageId", pageId);
      // verify required parameter 'status' is not null or undefined
      assertParamExists("changePageStatus", "status", status);
      const localVarPath = `/pages/{language}/{pageId}/{status}`
        .replace(`{${"language"}}`, encodeURIComponent(String(language)))
        .replace(`{${"pageId"}}`, encodeURIComponent(String(pageId)))
        .replace(`{${"status"}}`, encodeURIComponent(String(status)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * <a href=\'http://geonetwork-opensource.org/manuals/4.0.x/eng/users/user-guide/define-static-pages/define-pages.html\'>More info</a>
     * @summary Delete a Page object
     * @param {string} language
     * @param {string} pageId
     * @param {'LINK' | 'HTML' | 'TEXT' | 'MARKDOWN' | 'WIKI'} format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePage: async (
      language: string,
      pageId: string,
      format: "LINK" | "HTML" | "TEXT" | "MARKDOWN" | "WIKI",
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'language' is not null or undefined
      assertParamExists("deletePage", "language", language);
      // verify required parameter 'pageId' is not null or undefined
      assertParamExists("deletePage", "pageId", pageId);
      // verify required parameter 'format' is not null or undefined
      assertParamExists("deletePage", "format", format);
      const localVarPath = `/pages/{language}/{pageId}`
        .replace(`{${"language"}}`, encodeURIComponent(String(language)))
        .replace(`{${"pageId"}}`, encodeURIComponent(String(pageId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (format !== undefined) {
        localVarQueryParameter["format"] = format;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * <a href=\'http://geonetwork-opensource.org/manuals/4.0.x/eng/users/user-guide/define-static-pages/define-pages.html\'>More info</a>
     * @summary Edit a Page content and format
     * @param {string} language
     * @param {string} pageId
     * @param {'LINK' | 'HTML' | 'TEXT' | 'MARKDOWN' | 'WIKI'} format
     * @param {string} [link]
     * @param {InlineObject1} [inlineObject1]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editPage: async (
      language: string,
      pageId: string,
      format: "LINK" | "HTML" | "TEXT" | "MARKDOWN" | "WIKI",
      link?: string,
      inlineObject1?: InlineObject1,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'language' is not null or undefined
      assertParamExists("editPage", "language", language);
      // verify required parameter 'pageId' is not null or undefined
      assertParamExists("editPage", "pageId", pageId);
      // verify required parameter 'format' is not null or undefined
      assertParamExists("editPage", "format", format);
      const localVarPath = `/pages/{language}/{pageId}`
        .replace(`{${"language"}}`, encodeURIComponent(String(language)))
        .replace(`{${"pageId"}}`, encodeURIComponent(String(pageId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (link !== undefined) {
        localVarQueryParameter["link"] = link;
      }

      if (format !== undefined) {
        localVarQueryParameter["format"] = format;
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        inlineObject1,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * <a href=\'http://geonetwork-opensource.org/manuals/4.0.x/eng/users/user-guide/define-static-pages/define-pages.html\'>More info</a>
     * @summary Edit a Page name and language
     * @param {string} language
     * @param {string} pageId
     * @param {string} [newLanguage]
     * @param {string} [newPageId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editPageName: async (
      language: string,
      pageId: string,
      newLanguage?: string,
      newPageId?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'language' is not null or undefined
      assertParamExists("editPageName", "language", language);
      // verify required parameter 'pageId' is not null or undefined
      assertParamExists("editPageName", "pageId", pageId);
      const localVarPath = `/pages/{language}/{pageId}`
        .replace(`{${"language"}}`, encodeURIComponent(String(language)))
        .replace(`{${"pageId"}}`, encodeURIComponent(String(pageId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (newLanguage !== undefined) {
        localVarQueryParameter["newLanguage"] = newLanguage;
      }

      if (newPageId !== undefined) {
        localVarQueryParameter["newPageId"] = newPageId;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * <a href=\'http://geonetwork-opensource.org/manuals/4.0.x/eng/users/user-guide/define-static-pages/define-pages.html\'>More info</a>
     * @summary Return the page object details except the content
     * @param {string} language
     * @param {string} pageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPage: async (
      language: string,
      pageId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'language' is not null or undefined
      assertParamExists("getPage", "language", language);
      // verify required parameter 'pageId' is not null or undefined
      assertParamExists("getPage", "pageId", pageId);
      const localVarPath = `/pages/{language}/{pageId}`
        .replace(`{${"language"}}`, encodeURIComponent(String(language)))
        .replace(`{${"pageId"}}`, encodeURIComponent(String(pageId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * <a href=\'http://geonetwork-opensource.org/manuals/4.0.x/eng/users/user-guide/define-static-pages/define-pages.html\'>More info</a>
     * @summary Return the static html content identified by pageId
     * @param {string} language
     * @param {string} pageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPageContent: async (
      language: string,
      pageId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'language' is not null or undefined
      assertParamExists("getPageContent", "language", language);
      // verify required parameter 'pageId' is not null or undefined
      assertParamExists("getPageContent", "pageId", pageId);
      const localVarPath = `/pages/{language}/{pageId}/content`
        .replace(`{${"language"}}`, encodeURIComponent(String(language)))
        .replace(`{${"pageId"}}`, encodeURIComponent(String(pageId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * <a href=\'http://geonetwork-opensource.org/manuals/4.0.x/eng/users/user-guide/define-static-pages/define-pages.html\'>More info</a>
     * @summary List all pages according to the filters
     * @param {string} [language]
     * @param {'ALL' | 'TOP' | 'FOOTER' | 'MENU' | 'SUBMENU' | 'CUSTOM_MENU1' | 'CUSTOM_MENU2' | 'CUSTOM_MENU3' | 'DRAFT'} [section]
     * @param {'LINK' | 'HTML' | 'TEXT' | 'MARKDOWN' | 'WIKI'} [format]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPages: async (
      language?: string,
      section?:
        | "ALL"
        | "TOP"
        | "FOOTER"
        | "MENU"
        | "SUBMENU"
        | "CUSTOM_MENU1"
        | "CUSTOM_MENU2"
        | "CUSTOM_MENU3"
        | "DRAFT",
      format?: "LINK" | "HTML" | "TEXT" | "MARKDOWN" | "WIKI",
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/pages/list`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (language !== undefined) {
        localVarQueryParameter["language"] = language;
      }

      if (section !== undefined) {
        localVarQueryParameter["section"] = section;
      }

      if (format !== undefined) {
        localVarQueryParameter["format"] = format;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * <a href=\'http://geonetwork-opensource.org/manuals/4.0.x/eng/users/user-guide/define-static-pages/define-pages.html\'>More info</a>
     * @summary Removes the page from a section. This means that the link to the page will not be shown in the list associated to that section.
     * @param {string} language
     * @param {string} pageId
     * @param {'ALL' | 'TOP' | 'FOOTER' | 'MENU' | 'SUBMENU' | 'CUSTOM_MENU1' | 'CUSTOM_MENU2' | 'CUSTOM_MENU3' | 'DRAFT'} section
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removePageFromSection: async (
      language: string,
      pageId: string,
      section:
        | "ALL"
        | "TOP"
        | "FOOTER"
        | "MENU"
        | "SUBMENU"
        | "CUSTOM_MENU1"
        | "CUSTOM_MENU2"
        | "CUSTOM_MENU3"
        | "DRAFT",
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'language' is not null or undefined
      assertParamExists("removePageFromSection", "language", language);
      // verify required parameter 'pageId' is not null or undefined
      assertParamExists("removePageFromSection", "pageId", pageId);
      // verify required parameter 'section' is not null or undefined
      assertParamExists("removePageFromSection", "section", section);
      const localVarPath = `/pages/{language}/{pageId}/{section}`
        .replace(`{${"language"}}`, encodeURIComponent(String(language)))
        .replace(`{${"pageId"}}`, encodeURIComponent(String(pageId)))
        .replace(`{${"section"}}`, encodeURIComponent(String(section)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PagesApi - functional programming interface
 * @export
 */
export const PagesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PagesApiAxiosParamCreator(configuration);
  return {
    /**
     * <p>Is not possible to load a link and a file at the same time.</p> <a href=\'http://geonetwork-opensource.org/manuals/4.0.x/eng/users/user-guide/define-static-pages/define-pages.html\'>More info</a>
     * @summary Add a new Page object in DRAFT section in status HIDDEN
     * @param {string} language
     * @param {string} pageId
     * @param {'LINK' | 'HTML' | 'TEXT' | 'MARKDOWN' | 'WIKI'} format
     * @param {string} [link]
     * @param {InlineObject} [inlineObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addPage(
      language: string,
      pageId: string,
      format: "LINK" | "HTML" | "TEXT" | "MARKDOWN" | "WIKI",
      link?: string,
      inlineObject?: InlineObject,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addPage(
        language,
        pageId,
        format,
        link,
        inlineObject,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * <a href=\'http://geonetwork-opensource.org/manuals/4.0.x/eng/users/user-guide/define-static-pages/define-pages.html\'>More info</a>
     * @summary Adds the page to a section. This means that the link to the page will be shown in the list associated to that section.
     * @param {string} language
     * @param {string} pageId
     * @param {'ALL' | 'TOP' | 'FOOTER' | 'MENU' | 'SUBMENU' | 'CUSTOM_MENU1' | 'CUSTOM_MENU2' | 'CUSTOM_MENU3' | 'DRAFT'} section
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addPageToSection(
      language: string,
      pageId: string,
      section:
        | "ALL"
        | "TOP"
        | "FOOTER"
        | "MENU"
        | "SUBMENU"
        | "CUSTOM_MENU1"
        | "CUSTOM_MENU2"
        | "CUSTOM_MENU3"
        | "DRAFT",
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.addPageToSection(
          language,
          pageId,
          section,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * <a href=\'http://geonetwork-opensource.org/manuals/4.0.x/eng/users/user-guide/define-static-pages/define-pages.html\'>More info</a>
     * @summary Changes the status of a page.
     * @param {string} language
     * @param {string} pageId
     * @param {'PUBLIC' | 'PUBLIC_ONLY' | 'PRIVATE' | 'HIDDEN'} status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async changePageStatus(
      language: string,
      pageId: string,
      status: "PUBLIC" | "PUBLIC_ONLY" | "PRIVATE" | "HIDDEN",
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.changePageStatus(
          language,
          pageId,
          status,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * <a href=\'http://geonetwork-opensource.org/manuals/4.0.x/eng/users/user-guide/define-static-pages/define-pages.html\'>More info</a>
     * @summary Delete a Page object
     * @param {string} language
     * @param {string} pageId
     * @param {'LINK' | 'HTML' | 'TEXT' | 'MARKDOWN' | 'WIKI'} format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletePage(
      language: string,
      pageId: string,
      format: "LINK" | "HTML" | "TEXT" | "MARKDOWN" | "WIKI",
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletePage(
        language,
        pageId,
        format,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * <a href=\'http://geonetwork-opensource.org/manuals/4.0.x/eng/users/user-guide/define-static-pages/define-pages.html\'>More info</a>
     * @summary Edit a Page content and format
     * @param {string} language
     * @param {string} pageId
     * @param {'LINK' | 'HTML' | 'TEXT' | 'MARKDOWN' | 'WIKI'} format
     * @param {string} [link]
     * @param {InlineObject1} [inlineObject1]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async editPage(
      language: string,
      pageId: string,
      format: "LINK" | "HTML" | "TEXT" | "MARKDOWN" | "WIKI",
      link?: string,
      inlineObject1?: InlineObject1,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.editPage(
        language,
        pageId,
        format,
        link,
        inlineObject1,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * <a href=\'http://geonetwork-opensource.org/manuals/4.0.x/eng/users/user-guide/define-static-pages/define-pages.html\'>More info</a>
     * @summary Edit a Page name and language
     * @param {string} language
     * @param {string} pageId
     * @param {string} [newLanguage]
     * @param {string} [newPageId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async editPageName(
      language: string,
      pageId: string,
      newLanguage?: string,
      newPageId?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.editPageName(
        language,
        pageId,
        newLanguage,
        newPageId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * <a href=\'http://geonetwork-opensource.org/manuals/4.0.x/eng/users/user-guide/define-static-pages/define-pages.html\'>More info</a>
     * @summary Return the page object details except the content
     * @param {string} language
     * @param {string} pageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPage(
      language: string,
      pageId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PageJSONWrapper>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPage(
        language,
        pageId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * <a href=\'http://geonetwork-opensource.org/manuals/4.0.x/eng/users/user-guide/define-static-pages/define-pages.html\'>More info</a>
     * @summary Return the static html content identified by pageId
     * @param {string} language
     * @param {string} pageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPageContent(
      language: string,
      pageId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPageContent(
        language,
        pageId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * <a href=\'http://geonetwork-opensource.org/manuals/4.0.x/eng/users/user-guide/define-static-pages/define-pages.html\'>More info</a>
     * @summary List all pages according to the filters
     * @param {string} [language]
     * @param {'ALL' | 'TOP' | 'FOOTER' | 'MENU' | 'SUBMENU' | 'CUSTOM_MENU1' | 'CUSTOM_MENU2' | 'CUSTOM_MENU3' | 'DRAFT'} [section]
     * @param {'LINK' | 'HTML' | 'TEXT' | 'MARKDOWN' | 'WIKI'} [format]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listPages(
      language?: string,
      section?:
        | "ALL"
        | "TOP"
        | "FOOTER"
        | "MENU"
        | "SUBMENU"
        | "CUSTOM_MENU1"
        | "CUSTOM_MENU2"
        | "CUSTOM_MENU3"
        | "DRAFT",
      format?: "LINK" | "HTML" | "TEXT" | "MARKDOWN" | "WIKI",
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listPages(
        language,
        section,
        format,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * <a href=\'http://geonetwork-opensource.org/manuals/4.0.x/eng/users/user-guide/define-static-pages/define-pages.html\'>More info</a>
     * @summary Removes the page from a section. This means that the link to the page will not be shown in the list associated to that section.
     * @param {string} language
     * @param {string} pageId
     * @param {'ALL' | 'TOP' | 'FOOTER' | 'MENU' | 'SUBMENU' | 'CUSTOM_MENU1' | 'CUSTOM_MENU2' | 'CUSTOM_MENU3' | 'DRAFT'} section
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removePageFromSection(
      language: string,
      pageId: string,
      section:
        | "ALL"
        | "TOP"
        | "FOOTER"
        | "MENU"
        | "SUBMENU"
        | "CUSTOM_MENU1"
        | "CUSTOM_MENU2"
        | "CUSTOM_MENU3"
        | "DRAFT",
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.removePageFromSection(
          language,
          pageId,
          section,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * PagesApi - factory interface
 * @export
 */
export const PagesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = PagesApiFp(configuration);
  return {
    /**
     * <p>Is not possible to load a link and a file at the same time.</p> <a href=\'http://geonetwork-opensource.org/manuals/4.0.x/eng/users/user-guide/define-static-pages/define-pages.html\'>More info</a>
     * @summary Add a new Page object in DRAFT section in status HIDDEN
     * @param {string} language
     * @param {string} pageId
     * @param {'LINK' | 'HTML' | 'TEXT' | 'MARKDOWN' | 'WIKI'} format
     * @param {string} [link]
     * @param {InlineObject} [inlineObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addPage(
      language: string,
      pageId: string,
      format: "LINK" | "HTML" | "TEXT" | "MARKDOWN" | "WIKI",
      link?: string,
      inlineObject?: InlineObject,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .addPage(language, pageId, format, link, inlineObject, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * <a href=\'http://geonetwork-opensource.org/manuals/4.0.x/eng/users/user-guide/define-static-pages/define-pages.html\'>More info</a>
     * @summary Adds the page to a section. This means that the link to the page will be shown in the list associated to that section.
     * @param {string} language
     * @param {string} pageId
     * @param {'ALL' | 'TOP' | 'FOOTER' | 'MENU' | 'SUBMENU' | 'CUSTOM_MENU1' | 'CUSTOM_MENU2' | 'CUSTOM_MENU3' | 'DRAFT'} section
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addPageToSection(
      language: string,
      pageId: string,
      section:
        | "ALL"
        | "TOP"
        | "FOOTER"
        | "MENU"
        | "SUBMENU"
        | "CUSTOM_MENU1"
        | "CUSTOM_MENU2"
        | "CUSTOM_MENU3"
        | "DRAFT",
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .addPageToSection(language, pageId, section, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * <a href=\'http://geonetwork-opensource.org/manuals/4.0.x/eng/users/user-guide/define-static-pages/define-pages.html\'>More info</a>
     * @summary Changes the status of a page.
     * @param {string} language
     * @param {string} pageId
     * @param {'PUBLIC' | 'PUBLIC_ONLY' | 'PRIVATE' | 'HIDDEN'} status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changePageStatus(
      language: string,
      pageId: string,
      status: "PUBLIC" | "PUBLIC_ONLY" | "PRIVATE" | "HIDDEN",
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .changePageStatus(language, pageId, status, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * <a href=\'http://geonetwork-opensource.org/manuals/4.0.x/eng/users/user-guide/define-static-pages/define-pages.html\'>More info</a>
     * @summary Delete a Page object
     * @param {string} language
     * @param {string} pageId
     * @param {'LINK' | 'HTML' | 'TEXT' | 'MARKDOWN' | 'WIKI'} format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePage(
      language: string,
      pageId: string,
      format: "LINK" | "HTML" | "TEXT" | "MARKDOWN" | "WIKI",
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .deletePage(language, pageId, format, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * <a href=\'http://geonetwork-opensource.org/manuals/4.0.x/eng/users/user-guide/define-static-pages/define-pages.html\'>More info</a>
     * @summary Edit a Page content and format
     * @param {string} language
     * @param {string} pageId
     * @param {'LINK' | 'HTML' | 'TEXT' | 'MARKDOWN' | 'WIKI'} format
     * @param {string} [link]
     * @param {InlineObject1} [inlineObject1]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editPage(
      language: string,
      pageId: string,
      format: "LINK" | "HTML" | "TEXT" | "MARKDOWN" | "WIKI",
      link?: string,
      inlineObject1?: InlineObject1,
      options?: any
    ): AxiosPromise<string> {
      return localVarFp
        .editPage(language, pageId, format, link, inlineObject1, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * <a href=\'http://geonetwork-opensource.org/manuals/4.0.x/eng/users/user-guide/define-static-pages/define-pages.html\'>More info</a>
     * @summary Edit a Page name and language
     * @param {string} language
     * @param {string} pageId
     * @param {string} [newLanguage]
     * @param {string} [newPageId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editPageName(
      language: string,
      pageId: string,
      newLanguage?: string,
      newPageId?: string,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .editPageName(language, pageId, newLanguage, newPageId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * <a href=\'http://geonetwork-opensource.org/manuals/4.0.x/eng/users/user-guide/define-static-pages/define-pages.html\'>More info</a>
     * @summary Return the page object details except the content
     * @param {string} language
     * @param {string} pageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPage(
      language: string,
      pageId: string,
      options?: any
    ): AxiosPromise<PageJSONWrapper> {
      return localVarFp
        .getPage(language, pageId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * <a href=\'http://geonetwork-opensource.org/manuals/4.0.x/eng/users/user-guide/define-static-pages/define-pages.html\'>More info</a>
     * @summary Return the static html content identified by pageId
     * @param {string} language
     * @param {string} pageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPageContent(
      language: string,
      pageId: string,
      options?: any
    ): AxiosPromise<string> {
      return localVarFp
        .getPageContent(language, pageId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * <a href=\'http://geonetwork-opensource.org/manuals/4.0.x/eng/users/user-guide/define-static-pages/define-pages.html\'>More info</a>
     * @summary List all pages according to the filters
     * @param {string} [language]
     * @param {'ALL' | 'TOP' | 'FOOTER' | 'MENU' | 'SUBMENU' | 'CUSTOM_MENU1' | 'CUSTOM_MENU2' | 'CUSTOM_MENU3' | 'DRAFT'} [section]
     * @param {'LINK' | 'HTML' | 'TEXT' | 'MARKDOWN' | 'WIKI'} [format]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPages(
      language?: string,
      section?:
        | "ALL"
        | "TOP"
        | "FOOTER"
        | "MENU"
        | "SUBMENU"
        | "CUSTOM_MENU1"
        | "CUSTOM_MENU2"
        | "CUSTOM_MENU3"
        | "DRAFT",
      format?: "LINK" | "HTML" | "TEXT" | "MARKDOWN" | "WIKI",
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .listPages(language, section, format, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * <a href=\'http://geonetwork-opensource.org/manuals/4.0.x/eng/users/user-guide/define-static-pages/define-pages.html\'>More info</a>
     * @summary Removes the page from a section. This means that the link to the page will not be shown in the list associated to that section.
     * @param {string} language
     * @param {string} pageId
     * @param {'ALL' | 'TOP' | 'FOOTER' | 'MENU' | 'SUBMENU' | 'CUSTOM_MENU1' | 'CUSTOM_MENU2' | 'CUSTOM_MENU3' | 'DRAFT'} section
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removePageFromSection(
      language: string,
      pageId: string,
      section:
        | "ALL"
        | "TOP"
        | "FOOTER"
        | "MENU"
        | "SUBMENU"
        | "CUSTOM_MENU1"
        | "CUSTOM_MENU2"
        | "CUSTOM_MENU3"
        | "DRAFT",
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .removePageFromSection(language, pageId, section, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * PagesApi - object-oriented interface
 * @export
 * @class PagesApi
 * @extends {BaseAPI}
 */
export class PagesApi extends BaseAPI {
  /**
   * <p>Is not possible to load a link and a file at the same time.</p> <a href=\'http://geonetwork-opensource.org/manuals/4.0.x/eng/users/user-guide/define-static-pages/define-pages.html\'>More info</a>
   * @summary Add a new Page object in DRAFT section in status HIDDEN
   * @param {string} language
   * @param {string} pageId
   * @param {'LINK' | 'HTML' | 'TEXT' | 'MARKDOWN' | 'WIKI'} format
   * @param {string} [link]
   * @param {InlineObject} [inlineObject]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PagesApi
   */
  public addPage(
    language: string,
    pageId: string,
    format: "LINK" | "HTML" | "TEXT" | "MARKDOWN" | "WIKI",
    link?: string,
    inlineObject?: InlineObject,
    options?: AxiosRequestConfig
  ) {
    return PagesApiFp(this.configuration)
      .addPage(language, pageId, format, link, inlineObject, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * <a href=\'http://geonetwork-opensource.org/manuals/4.0.x/eng/users/user-guide/define-static-pages/define-pages.html\'>More info</a>
   * @summary Adds the page to a section. This means that the link to the page will be shown in the list associated to that section.
   * @param {string} language
   * @param {string} pageId
   * @param {'ALL' | 'TOP' | 'FOOTER' | 'MENU' | 'SUBMENU' | 'CUSTOM_MENU1' | 'CUSTOM_MENU2' | 'CUSTOM_MENU3' | 'DRAFT'} section
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PagesApi
   */
  public addPageToSection(
    language: string,
    pageId: string,
    section:
      | "ALL"
      | "TOP"
      | "FOOTER"
      | "MENU"
      | "SUBMENU"
      | "CUSTOM_MENU1"
      | "CUSTOM_MENU2"
      | "CUSTOM_MENU3"
      | "DRAFT",
    options?: AxiosRequestConfig
  ) {
    return PagesApiFp(this.configuration)
      .addPageToSection(language, pageId, section, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * <a href=\'http://geonetwork-opensource.org/manuals/4.0.x/eng/users/user-guide/define-static-pages/define-pages.html\'>More info</a>
   * @summary Changes the status of a page.
   * @param {string} language
   * @param {string} pageId
   * @param {'PUBLIC' | 'PUBLIC_ONLY' | 'PRIVATE' | 'HIDDEN'} status
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PagesApi
   */
  public changePageStatus(
    language: string,
    pageId: string,
    status: "PUBLIC" | "PUBLIC_ONLY" | "PRIVATE" | "HIDDEN",
    options?: AxiosRequestConfig
  ) {
    return PagesApiFp(this.configuration)
      .changePageStatus(language, pageId, status, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * <a href=\'http://geonetwork-opensource.org/manuals/4.0.x/eng/users/user-guide/define-static-pages/define-pages.html\'>More info</a>
   * @summary Delete a Page object
   * @param {string} language
   * @param {string} pageId
   * @param {'LINK' | 'HTML' | 'TEXT' | 'MARKDOWN' | 'WIKI'} format
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PagesApi
   */
  public deletePage(
    language: string,
    pageId: string,
    format: "LINK" | "HTML" | "TEXT" | "MARKDOWN" | "WIKI",
    options?: AxiosRequestConfig
  ) {
    return PagesApiFp(this.configuration)
      .deletePage(language, pageId, format, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * <a href=\'http://geonetwork-opensource.org/manuals/4.0.x/eng/users/user-guide/define-static-pages/define-pages.html\'>More info</a>
   * @summary Edit a Page content and format
   * @param {string} language
   * @param {string} pageId
   * @param {'LINK' | 'HTML' | 'TEXT' | 'MARKDOWN' | 'WIKI'} format
   * @param {string} [link]
   * @param {InlineObject1} [inlineObject1]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PagesApi
   */
  public editPage(
    language: string,
    pageId: string,
    format: "LINK" | "HTML" | "TEXT" | "MARKDOWN" | "WIKI",
    link?: string,
    inlineObject1?: InlineObject1,
    options?: AxiosRequestConfig
  ) {
    return PagesApiFp(this.configuration)
      .editPage(language, pageId, format, link, inlineObject1, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * <a href=\'http://geonetwork-opensource.org/manuals/4.0.x/eng/users/user-guide/define-static-pages/define-pages.html\'>More info</a>
   * @summary Edit a Page name and language
   * @param {string} language
   * @param {string} pageId
   * @param {string} [newLanguage]
   * @param {string} [newPageId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PagesApi
   */
  public editPageName(
    language: string,
    pageId: string,
    newLanguage?: string,
    newPageId?: string,
    options?: AxiosRequestConfig
  ) {
    return PagesApiFp(this.configuration)
      .editPageName(language, pageId, newLanguage, newPageId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * <a href=\'http://geonetwork-opensource.org/manuals/4.0.x/eng/users/user-guide/define-static-pages/define-pages.html\'>More info</a>
   * @summary Return the page object details except the content
   * @param {string} language
   * @param {string} pageId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PagesApi
   */
  public getPage(
    language: string,
    pageId: string,
    options?: AxiosRequestConfig
  ) {
    return PagesApiFp(this.configuration)
      .getPage(language, pageId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * <a href=\'http://geonetwork-opensource.org/manuals/4.0.x/eng/users/user-guide/define-static-pages/define-pages.html\'>More info</a>
   * @summary Return the static html content identified by pageId
   * @param {string} language
   * @param {string} pageId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PagesApi
   */
  public getPageContent(
    language: string,
    pageId: string,
    options?: AxiosRequestConfig
  ) {
    return PagesApiFp(this.configuration)
      .getPageContent(language, pageId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * <a href=\'http://geonetwork-opensource.org/manuals/4.0.x/eng/users/user-guide/define-static-pages/define-pages.html\'>More info</a>
   * @summary List all pages according to the filters
   * @param {string} [language]
   * @param {'ALL' | 'TOP' | 'FOOTER' | 'MENU' | 'SUBMENU' | 'CUSTOM_MENU1' | 'CUSTOM_MENU2' | 'CUSTOM_MENU3' | 'DRAFT'} [section]
   * @param {'LINK' | 'HTML' | 'TEXT' | 'MARKDOWN' | 'WIKI'} [format]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PagesApi
   */
  public listPages(
    language?: string,
    section?:
      | "ALL"
      | "TOP"
      | "FOOTER"
      | "MENU"
      | "SUBMENU"
      | "CUSTOM_MENU1"
      | "CUSTOM_MENU2"
      | "CUSTOM_MENU3"
      | "DRAFT",
    format?: "LINK" | "HTML" | "TEXT" | "MARKDOWN" | "WIKI",
    options?: AxiosRequestConfig
  ) {
    return PagesApiFp(this.configuration)
      .listPages(language, section, format, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * <a href=\'http://geonetwork-opensource.org/manuals/4.0.x/eng/users/user-guide/define-static-pages/define-pages.html\'>More info</a>
   * @summary Removes the page from a section. This means that the link to the page will not be shown in the list associated to that section.
   * @param {string} language
   * @param {string} pageId
   * @param {'ALL' | 'TOP' | 'FOOTER' | 'MENU' | 'SUBMENU' | 'CUSTOM_MENU1' | 'CUSTOM_MENU2' | 'CUSTOM_MENU3' | 'DRAFT'} section
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PagesApi
   */
  public removePageFromSection(
    language: string,
    pageId: string,
    section:
      | "ALL"
      | "TOP"
      | "FOOTER"
      | "MENU"
      | "SUBMENU"
      | "CUSTOM_MENU1"
      | "CUSTOM_MENU2"
      | "CUSTOM_MENU3"
      | "DRAFT",
    options?: AxiosRequestConfig
  ) {
    return PagesApiFp(this.configuration)
      .removePageFromSection(language, pageId, section, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

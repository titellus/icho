/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork 4.0.6 OpenAPI Documentation
 * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.
 *
 * The version of the OpenAPI document: 4.0.6
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
import { Configuration } from "../../../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../../../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../../../base";
// @ts-ignore
import { MetadataCategory } from "../../..//geonetwork-openapi/model";
/**
 * TagsApi - axios parameter creator
 * @export
 */
export const TagsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Remove a tag
     * @param {number} tagIdentifier Tag identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTag: async (
      tagIdentifier: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'tagIdentifier' is not null or undefined
      assertParamExists("deleteTag", "tagIdentifier", tagIdentifier);
      const localVarPath = `/tags/{tagIdentifier}`.replace(
        `{${"tagIdentifier"}}`,
        encodeURIComponent(String(tagIdentifier))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a tag
     * @param {number} tagIdentifier Tag identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTag: async (
      tagIdentifier: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'tagIdentifier' is not null or undefined
      assertParamExists("getTag", "tagIdentifier", tagIdentifier);
      const localVarPath = `/tags/{tagIdentifier}`.replace(
        `{${"tagIdentifier"}}`,
        encodeURIComponent(String(tagIdentifier))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTags: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/tags`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * If labels are not defined, a default label is created with the category name for all languages.
     * @summary Create a tag
     * @param {MetadataCategory} metadataCategory
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putTag: async (
      metadataCategory: MetadataCategory,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'metadataCategory' is not null or undefined
      assertParamExists("putTag", "metadataCategory", metadataCategory);
      const localVarPath = `/tags`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        metadataCategory,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a tag
     * @param {number} tagIdentifier Tag identifier
     * @param {MetadataCategory} metadataCategory
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTag: async (
      tagIdentifier: number,
      metadataCategory: MetadataCategory,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'tagIdentifier' is not null or undefined
      assertParamExists("updateTag", "tagIdentifier", tagIdentifier);
      // verify required parameter 'metadataCategory' is not null or undefined
      assertParamExists("updateTag", "metadataCategory", metadataCategory);
      const localVarPath = `/tags/{tagIdentifier}`.replace(
        `{${"tagIdentifier"}}`,
        encodeURIComponent(String(tagIdentifier))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        metadataCategory,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * TagsApi - functional programming interface
 * @export
 */
export const TagsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = TagsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Remove a tag
     * @param {number} tagIdentifier Tag identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteTag(
      tagIdentifier: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTag(
        tagIdentifier,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get a tag
     * @param {number} tagIdentifier Tag identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTag(
      tagIdentifier: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<MetadataCategory>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getTag(
        tagIdentifier,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTags(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<MetadataCategory>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getTags(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * If labels are not defined, a default label is created with the category name for all languages.
     * @summary Create a tag
     * @param {MetadataCategory} metadataCategory
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putTag(
      metadataCategory: MetadataCategory,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putTag(
        metadataCategory,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update a tag
     * @param {number} tagIdentifier Tag identifier
     * @param {MetadataCategory} metadataCategory
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateTag(
      tagIdentifier: number,
      metadataCategory: MetadataCategory,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateTag(
        tagIdentifier,
        metadataCategory,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * TagsApi - factory interface
 * @export
 */
export const TagsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = TagsApiFp(configuration);
  return {
    /**
     *
     * @summary Remove a tag
     * @param {number} tagIdentifier Tag identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTag(tagIdentifier: number, options?: any): AxiosPromise<string> {
      return localVarFp
        .deleteTag(tagIdentifier, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a tag
     * @param {number} tagIdentifier Tag identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTag(
      tagIdentifier: number,
      options?: any
    ): AxiosPromise<MetadataCategory> {
      return localVarFp
        .getTag(tagIdentifier, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTags(options?: any): AxiosPromise<Array<MetadataCategory>> {
      return localVarFp
        .getTags(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * If labels are not defined, a default label is created with the category name for all languages.
     * @summary Create a tag
     * @param {MetadataCategory} metadataCategory
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putTag(
      metadataCategory: MetadataCategory,
      options?: any
    ): AxiosPromise<number> {
      return localVarFp
        .putTag(metadataCategory, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a tag
     * @param {number} tagIdentifier Tag identifier
     * @param {MetadataCategory} metadataCategory
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTag(
      tagIdentifier: number,
      metadataCategory: MetadataCategory,
      options?: any
    ): AxiosPromise<string> {
      return localVarFp
        .updateTag(tagIdentifier, metadataCategory, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * TagsApi - object-oriented interface
 * @export
 * @class TagsApi
 * @extends {BaseAPI}
 */
export class TagsApi extends BaseAPI {
  /**
   *
   * @summary Remove a tag
   * @param {number} tagIdentifier Tag identifier
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TagsApi
   */
  public deleteTag(tagIdentifier: number, options?: AxiosRequestConfig) {
    return TagsApiFp(this.configuration)
      .deleteTag(tagIdentifier, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a tag
   * @param {number} tagIdentifier Tag identifier
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TagsApi
   */
  public getTag(tagIdentifier: number, options?: AxiosRequestConfig) {
    return TagsApiFp(this.configuration)
      .getTag(tagIdentifier, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get tags
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TagsApi
   */
  public getTags(options?: AxiosRequestConfig) {
    return TagsApiFp(this.configuration)
      .getTags(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * If labels are not defined, a default label is created with the category name for all languages.
   * @summary Create a tag
   * @param {MetadataCategory} metadataCategory
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TagsApi
   */
  public putTag(
    metadataCategory: MetadataCategory,
    options?: AxiosRequestConfig
  ) {
    return TagsApiFp(this.configuration)
      .putTag(metadataCategory, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a tag
   * @param {number} tagIdentifier Tag identifier
   * @param {MetadataCategory} metadataCategory
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TagsApi
   */
  public updateTag(
    tagIdentifier: number,
    metadataCategory: MetadataCategory,
    options?: AxiosRequestConfig
  ) {
    return TagsApiFp(this.configuration)
      .updateTag(tagIdentifier, metadataCategory, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

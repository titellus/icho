/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork 4.0.6 OpenAPI Documentation
 * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.
 *
 * The version of the OpenAPI document: 4.0.6
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
import { Configuration } from "../../../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../../../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../../../base";
// @ts-ignore
import { IsoLanguage } from "../../..//geonetwork-openapi/model";
// @ts-ignore
import { Language } from "../../..//geonetwork-openapi/model";
/**
 * LanguagesApi - axios parameter creator
 * @export
 */
export const LanguagesApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Add all default translations from all *Desc tables in the database. This operation will only add translations for a default catalog installation. Defaults can be customized in SQL scripts located in WEB-INF/classes/setup/sql/data/_*.
     * @summary Add a language
     * @param {string} langCode ISO 3 letter code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addLanguages: async (
      langCode: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'langCode' is not null or undefined
      assertParamExists("addLanguages", "langCode", langCode);
      const localVarPath = `/languages/{langCode}`.replace(
        `{${"langCode"}}`,
        encodeURIComponent(String(langCode))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Delete all translations from all *Desc tables in the database. Warning: This will also remove all translations you may have done to those objects (eg. custom groups).
     * @summary Remove a language
     * @param {string} langCode ISO 3 letter code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLanguage: async (
      langCode: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'langCode' is not null or undefined
      assertParamExists("deleteLanguage", "langCode", langCode);
      const localVarPath = `/languages/{langCode}`.replace(
        `{${"langCode"}}`,
        encodeURIComponent(String(langCode))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Languages available in this version of the application. Those that you can add using PUT operation and which have SQL script to initialize the language.
     * @summary Get languages available in the application
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getApplicationLanguages: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/languages/application`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ISO languages provides a list of all languages (eg. used for autocompletion in metadata editor).
     * @summary Get ISO languages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIsoLanguages: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/isolanguages`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Languages for the application having translations in the database. All tables with \'Desc\' suffix contains translation for some domain objects like groups, tags, ...
     * @summary Get languages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLanguages: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/languages`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * LanguagesApi - functional programming interface
 * @export
 */
export const LanguagesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    LanguagesApiAxiosParamCreator(configuration);
  return {
    /**
     * Add all default translations from all *Desc tables in the database. This operation will only add translations for a default catalog installation. Defaults can be customized in SQL scripts located in WEB-INF/classes/setup/sql/data/_*.
     * @summary Add a language
     * @param {string} langCode ISO 3 letter code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addLanguages(
      langCode: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addLanguages(
        langCode,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Delete all translations from all *Desc tables in the database. Warning: This will also remove all translations you may have done to those objects (eg. custom groups).
     * @summary Remove a language
     * @param {string} langCode ISO 3 letter code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteLanguage(
      langCode: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLanguage(
        langCode,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Languages available in this version of the application. Those that you can add using PUT operation and which have SQL script to initialize the language.
     * @summary Get languages available in the application
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getApplicationLanguages(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<Language>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getApplicationLanguages(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * ISO languages provides a list of all languages (eg. used for autocompletion in metadata editor).
     * @summary Get ISO languages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getIsoLanguages(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<IsoLanguage>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getIsoLanguages(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Languages for the application having translations in the database. All tables with \'Desc\' suffix contains translation for some domain objects like groups, tags, ...
     * @summary Get languages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getLanguages(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<Language>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getLanguages(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * LanguagesApi - factory interface
 * @export
 */
export const LanguagesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = LanguagesApiFp(configuration);
  return {
    /**
     * Add all default translations from all *Desc tables in the database. This operation will only add translations for a default catalog installation. Defaults can be customized in SQL scripts located in WEB-INF/classes/setup/sql/data/_*.
     * @summary Add a language
     * @param {string} langCode ISO 3 letter code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addLanguages(langCode: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .addLanguages(langCode, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Delete all translations from all *Desc tables in the database. Warning: This will also remove all translations you may have done to those objects (eg. custom groups).
     * @summary Remove a language
     * @param {string} langCode ISO 3 letter code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLanguage(langCode: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteLanguage(langCode, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Languages available in this version of the application. Those that you can add using PUT operation and which have SQL script to initialize the language.
     * @summary Get languages available in the application
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getApplicationLanguages(options?: any): AxiosPromise<Array<Language>> {
      return localVarFp
        .getApplicationLanguages(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * ISO languages provides a list of all languages (eg. used for autocompletion in metadata editor).
     * @summary Get ISO languages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIsoLanguages(options?: any): AxiosPromise<Array<IsoLanguage>> {
      return localVarFp
        .getIsoLanguages(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Languages for the application having translations in the database. All tables with \'Desc\' suffix contains translation for some domain objects like groups, tags, ...
     * @summary Get languages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLanguages(options?: any): AxiosPromise<Array<Language>> {
      return localVarFp
        .getLanguages(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * LanguagesApi - object-oriented interface
 * @export
 * @class LanguagesApi
 * @extends {BaseAPI}
 */
export class LanguagesApi extends BaseAPI {
  /**
   * Add all default translations from all *Desc tables in the database. This operation will only add translations for a default catalog installation. Defaults can be customized in SQL scripts located in WEB-INF/classes/setup/sql/data/_*.
   * @summary Add a language
   * @param {string} langCode ISO 3 letter code
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LanguagesApi
   */
  public addLanguages(langCode: string, options?: AxiosRequestConfig) {
    return LanguagesApiFp(this.configuration)
      .addLanguages(langCode, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Delete all translations from all *Desc tables in the database. Warning: This will also remove all translations you may have done to those objects (eg. custom groups).
   * @summary Remove a language
   * @param {string} langCode ISO 3 letter code
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LanguagesApi
   */
  public deleteLanguage(langCode: string, options?: AxiosRequestConfig) {
    return LanguagesApiFp(this.configuration)
      .deleteLanguage(langCode, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Languages available in this version of the application. Those that you can add using PUT operation and which have SQL script to initialize the language.
   * @summary Get languages available in the application
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LanguagesApi
   */
  public getApplicationLanguages(options?: AxiosRequestConfig) {
    return LanguagesApiFp(this.configuration)
      .getApplicationLanguages(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * ISO languages provides a list of all languages (eg. used for autocompletion in metadata editor).
   * @summary Get ISO languages
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LanguagesApi
   */
  public getIsoLanguages(options?: AxiosRequestConfig) {
    return LanguagesApiFp(this.configuration)
      .getIsoLanguages(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Languages for the application having translations in the database. All tables with \'Desc\' suffix contains translation for some domain objects like groups, tags, ...
   * @summary Get languages
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LanguagesApi
   */
  public getLanguages(options?: AxiosRequestConfig) {
    return LanguagesApiFp(this.configuration)
      .getLanguages(options)
      .then((request) => request(this.axios, this.basePath));
  }
}
